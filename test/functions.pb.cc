// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: functions.proto

#include "functions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ConstValueFloatFunctionConfig::ConstValueFloatFunctionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0){}
struct ConstValueFloatFunctionConfigDefaultTypeInternal {
  constexpr ConstValueFloatFunctionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConstValueFloatFunctionConfigDefaultTypeInternal() {}
  union {
    ConstValueFloatFunctionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConstValueFloatFunctionConfigDefaultTypeInternal _ConstValueFloatFunctionConfig_default_instance_;
constexpr LinearFloatFunctionConfig::LinearFloatFunctionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(0)
  , end_(0){}
struct LinearFloatFunctionConfigDefaultTypeInternal {
  constexpr LinearFloatFunctionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinearFloatFunctionConfigDefaultTypeInternal() {}
  union {
    LinearFloatFunctionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinearFloatFunctionConfigDefaultTypeInternal _LinearFloatFunctionConfig_default_instance_;
constexpr SinFloatFunctionConfig::SinFloatFunctionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_(0)
  , max_(0)
  , phase_(0)
  , repeats_(0){}
struct SinFloatFunctionConfigDefaultTypeInternal {
  constexpr SinFloatFunctionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SinFloatFunctionConfigDefaultTypeInternal() {}
  union {
    SinFloatFunctionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SinFloatFunctionConfigDefaultTypeInternal _SinFloatFunctionConfig_default_instance_;
constexpr StepsFloatFunctionConfig::StepsFloatFunctionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_steps_(0)
  , diff_per_step_(0)
  , first_step_value_(0){}
struct StepsFloatFunctionConfigDefaultTypeInternal {
  constexpr StepsFloatFunctionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StepsFloatFunctionConfigDefaultTypeInternal() {}
  union {
    StepsFloatFunctionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StepsFloatFunctionConfigDefaultTypeInternal _StepsFloatFunctionConfig_default_instance_;
constexpr RepeatFloatFunctionConfig::RepeatFloatFunctionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : functorepeat_(nullptr)
  , numberoftimes_(0){}
struct RepeatFloatFunctionConfigDefaultTypeInternal {
  constexpr RepeatFloatFunctionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RepeatFloatFunctionConfigDefaultTypeInternal() {}
  union {
    RepeatFloatFunctionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RepeatFloatFunctionConfigDefaultTypeInternal _RepeatFloatFunctionConfig_default_instance_;
constexpr HalfFloatFunctionConfig::HalfFloatFunctionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : f1_(nullptr)
  , f2_(nullptr){}
struct HalfFloatFunctionConfigDefaultTypeInternal {
  constexpr HalfFloatFunctionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HalfFloatFunctionConfigDefaultTypeInternal() {}
  union {
    HalfFloatFunctionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HalfFloatFunctionConfigDefaultTypeInternal _HalfFloatFunctionConfig_default_instance_;
constexpr Comb2FloatFunctionConfig::Comb2FloatFunctionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : f1_(nullptr)
  , f2_(nullptr)
  , amount1_(0)
  , amount2_(0){}
struct Comb2FloatFunctionConfigDefaultTypeInternal {
  constexpr Comb2FloatFunctionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Comb2FloatFunctionConfigDefaultTypeInternal() {}
  union {
    Comb2FloatFunctionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Comb2FloatFunctionConfigDefaultTypeInternal _Comb2FloatFunctionConfig_default_instance_;
constexpr FloatFunction::FloatFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct FloatFunctionDefaultTypeInternal {
  constexpr FloatFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatFunctionDefaultTypeInternal() {}
  union {
    FloatFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatFunctionDefaultTypeInternal _FloatFunction_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_functions_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_functions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_functions_2eproto = nullptr;

const uint32_t TableStruct_functions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConstValueFloatFunctionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConstValueFloatFunctionConfig, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LinearFloatFunctionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LinearFloatFunctionConfig, start_),
  PROTOBUF_FIELD_OFFSET(::LinearFloatFunctionConfig, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SinFloatFunctionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SinFloatFunctionConfig, min_),
  PROTOBUF_FIELD_OFFSET(::SinFloatFunctionConfig, max_),
  PROTOBUF_FIELD_OFFSET(::SinFloatFunctionConfig, phase_),
  PROTOBUF_FIELD_OFFSET(::SinFloatFunctionConfig, repeats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StepsFloatFunctionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepsFloatFunctionConfig, num_steps_),
  PROTOBUF_FIELD_OFFSET(::StepsFloatFunctionConfig, diff_per_step_),
  PROTOBUF_FIELD_OFFSET(::StepsFloatFunctionConfig, first_step_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RepeatFloatFunctionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RepeatFloatFunctionConfig, numberoftimes_),
  PROTOBUF_FIELD_OFFSET(::RepeatFloatFunctionConfig, functorepeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HalfFloatFunctionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HalfFloatFunctionConfig, f1_),
  PROTOBUF_FIELD_OFFSET(::HalfFloatFunctionConfig, f2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Comb2FloatFunctionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Comb2FloatFunctionConfig, f1_),
  PROTOBUF_FIELD_OFFSET(::Comb2FloatFunctionConfig, amount1_),
  PROTOBUF_FIELD_OFFSET(::Comb2FloatFunctionConfig, f2_),
  PROTOBUF_FIELD_OFFSET(::Comb2FloatFunctionConfig, amount2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FloatFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::FloatFunction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::FloatFunction, function_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ConstValueFloatFunctionConfig)},
  { 7, -1, -1, sizeof(::LinearFloatFunctionConfig)},
  { 15, -1, -1, sizeof(::SinFloatFunctionConfig)},
  { 25, -1, -1, sizeof(::StepsFloatFunctionConfig)},
  { 34, -1, -1, sizeof(::RepeatFloatFunctionConfig)},
  { 42, -1, -1, sizeof(::HalfFloatFunctionConfig)},
  { 50, -1, -1, sizeof(::Comb2FloatFunctionConfig)},
  { 60, -1, -1, sizeof(::FloatFunction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConstValueFloatFunctionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LinearFloatFunctionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SinFloatFunctionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StepsFloatFunctionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RepeatFloatFunctionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HalfFloatFunctionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Comb2FloatFunctionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FloatFunction_default_instance_),
};

const char descriptor_table_protodef_functions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017functions.proto\".\n\035ConstValueFloatFunc"
  "tionConfig\022\r\n\005value\030\001 \001(\002\"7\n\031LinearFloat"
  "FunctionConfig\022\r\n\005start\030\001 \001(\002\022\013\n\003end\030\002 \001"
  "(\002\"R\n\026SinFloatFunctionConfig\022\013\n\003min\030\001 \001("
  "\002\022\013\n\003max\030\002 \001(\002\022\r\n\005phase\030\003 \001(\002\022\017\n\007repeats"
  "\030\004 \001(\002\"^\n\030StepsFloatFunctionConfig\022\021\n\tnu"
  "m_steps\030\001 \001(\002\022\025\n\rdiff_per_step\030\002 \001(\002\022\030\n\020"
  "first_step_value\030\003 \001(\002\"X\n\031RepeatFloatFun"
  "ctionConfig\022\025\n\rnumberOfTimes\030\001 \001(\002\022$\n\014fu"
  "ncToRepeat\030\002 \001(\0132\016.FloatFunction\"Q\n\027Half"
  "FloatFunctionConfig\022\032\n\002f1\030\001 \001(\0132\016.FloatF"
  "unction\022\032\n\002f2\030\002 \001(\0132\016.FloatFunction\"t\n\030C"
  "omb2FloatFunctionConfig\022\032\n\002f1\030\001 \001(\0132\016.Fl"
  "oatFunction\022\017\n\007amount1\030\002 \001(\002\022\032\n\002f2\030\003 \001(\013"
  "2\016.FloatFunction\022\017\n\007amount2\030\004 \001(\002\"\330\002\n\rFl"
  "oatFunction\0225\n\013const_value\030\001 \001(\0132\036.Const"
  "ValueFloatFunctionConfigH\000\022,\n\006linear\030\002 \001"
  "(\0132\032.LinearFloatFunctionConfigH\000\022&\n\003sin\030"
  "\003 \001(\0132\027.SinFloatFunctionConfigH\000\022*\n\005step"
  "s\030\004 \001(\0132\031.StepsFloatFunctionConfigH\000\022,\n\006"
  "repeat\030\005 \001(\0132\032.RepeatFloatFunctionConfig"
  "H\000\022(\n\004half\030\006 \001(\0132\030.HalfFloatFunctionConf"
  "igH\000\022*\n\005comb2\030\007 \001(\0132\031.Comb2FloatFunction"
  "ConfigH\000B\n\n\010functionb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_functions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_functions_2eproto = {
  false, false, 948, descriptor_table_protodef_functions_2eproto, "functions.proto", 
  &descriptor_table_functions_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_functions_2eproto::offsets,
  file_level_metadata_functions_2eproto, file_level_enum_descriptors_functions_2eproto, file_level_service_descriptors_functions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_functions_2eproto_getter() {
  return &descriptor_table_functions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_functions_2eproto(&descriptor_table_functions_2eproto);

// ===================================================================

class ConstValueFloatFunctionConfig::_Internal {
 public:
};

ConstValueFloatFunctionConfig::ConstValueFloatFunctionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConstValueFloatFunctionConfig)
}
ConstValueFloatFunctionConfig::ConstValueFloatFunctionConfig(const ConstValueFloatFunctionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ConstValueFloatFunctionConfig)
}

inline void ConstValueFloatFunctionConfig::SharedCtor() {
value_ = 0;
}

ConstValueFloatFunctionConfig::~ConstValueFloatFunctionConfig() {
  // @@protoc_insertion_point(destructor:ConstValueFloatFunctionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConstValueFloatFunctionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConstValueFloatFunctionConfig::ArenaDtor(void* object) {
  ConstValueFloatFunctionConfig* _this = reinterpret_cast< ConstValueFloatFunctionConfig* >(object);
  (void)_this;
}
void ConstValueFloatFunctionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConstValueFloatFunctionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConstValueFloatFunctionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ConstValueFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstValueFloatFunctionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConstValueFloatFunctionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConstValueFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConstValueFloatFunctionConfig)
  return target;
}

size_t ConstValueFloatFunctionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConstValueFloatFunctionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConstValueFloatFunctionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConstValueFloatFunctionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConstValueFloatFunctionConfig::GetClassData() const { return &_class_data_; }

void ConstValueFloatFunctionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConstValueFloatFunctionConfig *>(to)->MergeFrom(
      static_cast<const ConstValueFloatFunctionConfig &>(from));
}


void ConstValueFloatFunctionConfig::MergeFrom(const ConstValueFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConstValueFloatFunctionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConstValueFloatFunctionConfig::CopyFrom(const ConstValueFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConstValueFloatFunctionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstValueFloatFunctionConfig::IsInitialized() const {
  return true;
}

void ConstValueFloatFunctionConfig::InternalSwap(ConstValueFloatFunctionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstValueFloatFunctionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_functions_2eproto_getter, &descriptor_table_functions_2eproto_once,
      file_level_metadata_functions_2eproto[0]);
}

// ===================================================================

class LinearFloatFunctionConfig::_Internal {
 public:
};

LinearFloatFunctionConfig::LinearFloatFunctionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LinearFloatFunctionConfig)
}
LinearFloatFunctionConfig::LinearFloatFunctionConfig(const LinearFloatFunctionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:LinearFloatFunctionConfig)
}

inline void LinearFloatFunctionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

LinearFloatFunctionConfig::~LinearFloatFunctionConfig() {
  // @@protoc_insertion_point(destructor:LinearFloatFunctionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinearFloatFunctionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LinearFloatFunctionConfig::ArenaDtor(void* object) {
  LinearFloatFunctionConfig* _this = reinterpret_cast< LinearFloatFunctionConfig* >(object);
  (void)_this;
}
void LinearFloatFunctionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearFloatFunctionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinearFloatFunctionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:LinearFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearFloatFunctionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinearFloatFunctionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinearFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float start = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start = this->_internal_start();
  uint32_t raw_start;
  memcpy(&raw_start, &tmp_start, sizeof(tmp_start));
  if (raw_start != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_start(), target);
  }

  // float end = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end = this->_internal_end();
  uint32_t raw_end;
  memcpy(&raw_end, &tmp_end, sizeof(tmp_end));
  if (raw_end != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinearFloatFunctionConfig)
  return target;
}

size_t LinearFloatFunctionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinearFloatFunctionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float start = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start = this->_internal_start();
  uint32_t raw_start;
  memcpy(&raw_start, &tmp_start, sizeof(tmp_start));
  if (raw_start != 0) {
    total_size += 1 + 4;
  }

  // float end = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end = this->_internal_end();
  uint32_t raw_end;
  memcpy(&raw_end, &tmp_end, sizeof(tmp_end));
  if (raw_end != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinearFloatFunctionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinearFloatFunctionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinearFloatFunctionConfig::GetClassData() const { return &_class_data_; }

void LinearFloatFunctionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LinearFloatFunctionConfig *>(to)->MergeFrom(
      static_cast<const LinearFloatFunctionConfig &>(from));
}


void LinearFloatFunctionConfig::MergeFrom(const LinearFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinearFloatFunctionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start = from._internal_start();
  uint32_t raw_start;
  memcpy(&raw_start, &tmp_start, sizeof(tmp_start));
  if (raw_start != 0) {
    _internal_set_start(from._internal_start());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end = from._internal_end();
  uint32_t raw_end;
  memcpy(&raw_end, &tmp_end, sizeof(tmp_end));
  if (raw_end != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinearFloatFunctionConfig::CopyFrom(const LinearFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinearFloatFunctionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearFloatFunctionConfig::IsInitialized() const {
  return true;
}

void LinearFloatFunctionConfig::InternalSwap(LinearFloatFunctionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearFloatFunctionConfig, end_)
      + sizeof(LinearFloatFunctionConfig::end_)
      - PROTOBUF_FIELD_OFFSET(LinearFloatFunctionConfig, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearFloatFunctionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_functions_2eproto_getter, &descriptor_table_functions_2eproto_once,
      file_level_metadata_functions_2eproto[1]);
}

// ===================================================================

class SinFloatFunctionConfig::_Internal {
 public:
};

SinFloatFunctionConfig::SinFloatFunctionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SinFloatFunctionConfig)
}
SinFloatFunctionConfig::SinFloatFunctionConfig(const SinFloatFunctionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeats_) -
    reinterpret_cast<char*>(&min_)) + sizeof(repeats_));
  // @@protoc_insertion_point(copy_constructor:SinFloatFunctionConfig)
}

inline void SinFloatFunctionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&repeats_) -
    reinterpret_cast<char*>(&min_)) + sizeof(repeats_));
}

SinFloatFunctionConfig::~SinFloatFunctionConfig() {
  // @@protoc_insertion_point(destructor:SinFloatFunctionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SinFloatFunctionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SinFloatFunctionConfig::ArenaDtor(void* object) {
  SinFloatFunctionConfig* _this = reinterpret_cast< SinFloatFunctionConfig* >(object);
  (void)_this;
}
void SinFloatFunctionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SinFloatFunctionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SinFloatFunctionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SinFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeats_) -
      reinterpret_cast<char*>(&min_)) + sizeof(repeats_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SinFloatFunctionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          phase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float repeats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          repeats_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SinFloatFunctionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SinFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min = this->_internal_min();
  uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min(), target);
  }

  // float max = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max = this->_internal_max();
  uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max(), target);
  }

  // float phase = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phase = this->_internal_phase();
  uint32_t raw_phase;
  memcpy(&raw_phase, &tmp_phase, sizeof(tmp_phase));
  if (raw_phase != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_phase(), target);
  }

  // float repeats = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeats = this->_internal_repeats();
  uint32_t raw_repeats;
  memcpy(&raw_repeats, &tmp_repeats, sizeof(tmp_repeats));
  if (raw_repeats != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_repeats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SinFloatFunctionConfig)
  return target;
}

size_t SinFloatFunctionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SinFloatFunctionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min = this->_internal_min();
  uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max = this->_internal_max();
  uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    total_size += 1 + 4;
  }

  // float phase = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phase = this->_internal_phase();
  uint32_t raw_phase;
  memcpy(&raw_phase, &tmp_phase, sizeof(tmp_phase));
  if (raw_phase != 0) {
    total_size += 1 + 4;
  }

  // float repeats = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeats = this->_internal_repeats();
  uint32_t raw_repeats;
  memcpy(&raw_repeats, &tmp_repeats, sizeof(tmp_repeats));
  if (raw_repeats != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SinFloatFunctionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SinFloatFunctionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SinFloatFunctionConfig::GetClassData() const { return &_class_data_; }

void SinFloatFunctionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SinFloatFunctionConfig *>(to)->MergeFrom(
      static_cast<const SinFloatFunctionConfig &>(from));
}


void SinFloatFunctionConfig::MergeFrom(const SinFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SinFloatFunctionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min = from._internal_min();
  uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    _internal_set_min(from._internal_min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max = from._internal_max();
  uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    _internal_set_max(from._internal_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phase = from._internal_phase();
  uint32_t raw_phase;
  memcpy(&raw_phase, &tmp_phase, sizeof(tmp_phase));
  if (raw_phase != 0) {
    _internal_set_phase(from._internal_phase());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeats = from._internal_repeats();
  uint32_t raw_repeats;
  memcpy(&raw_repeats, &tmp_repeats, sizeof(tmp_repeats));
  if (raw_repeats != 0) {
    _internal_set_repeats(from._internal_repeats());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SinFloatFunctionConfig::CopyFrom(const SinFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SinFloatFunctionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinFloatFunctionConfig::IsInitialized() const {
  return true;
}

void SinFloatFunctionConfig::InternalSwap(SinFloatFunctionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SinFloatFunctionConfig, repeats_)
      + sizeof(SinFloatFunctionConfig::repeats_)
      - PROTOBUF_FIELD_OFFSET(SinFloatFunctionConfig, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SinFloatFunctionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_functions_2eproto_getter, &descriptor_table_functions_2eproto_once,
      file_level_metadata_functions_2eproto[2]);
}

// ===================================================================

class StepsFloatFunctionConfig::_Internal {
 public:
};

StepsFloatFunctionConfig::StepsFloatFunctionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StepsFloatFunctionConfig)
}
StepsFloatFunctionConfig::StepsFloatFunctionConfig(const StepsFloatFunctionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_steps_, &from.num_steps_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_step_value_) -
    reinterpret_cast<char*>(&num_steps_)) + sizeof(first_step_value_));
  // @@protoc_insertion_point(copy_constructor:StepsFloatFunctionConfig)
}

inline void StepsFloatFunctionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_steps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_step_value_) -
    reinterpret_cast<char*>(&num_steps_)) + sizeof(first_step_value_));
}

StepsFloatFunctionConfig::~StepsFloatFunctionConfig() {
  // @@protoc_insertion_point(destructor:StepsFloatFunctionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StepsFloatFunctionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StepsFloatFunctionConfig::ArenaDtor(void* object) {
  StepsFloatFunctionConfig* _this = reinterpret_cast< StepsFloatFunctionConfig* >(object);
  (void)_this;
}
void StepsFloatFunctionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StepsFloatFunctionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StepsFloatFunctionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:StepsFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_steps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_step_value_) -
      reinterpret_cast<char*>(&num_steps_)) + sizeof(first_step_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepsFloatFunctionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float num_steps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          num_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float diff_per_step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          diff_per_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float first_step_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          first_step_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StepsFloatFunctionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StepsFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float num_steps = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_num_steps = this->_internal_num_steps();
  uint32_t raw_num_steps;
  memcpy(&raw_num_steps, &tmp_num_steps, sizeof(tmp_num_steps));
  if (raw_num_steps != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_num_steps(), target);
  }

  // float diff_per_step = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diff_per_step = this->_internal_diff_per_step();
  uint32_t raw_diff_per_step;
  memcpy(&raw_diff_per_step, &tmp_diff_per_step, sizeof(tmp_diff_per_step));
  if (raw_diff_per_step != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_diff_per_step(), target);
  }

  // float first_step_value = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_first_step_value = this->_internal_first_step_value();
  uint32_t raw_first_step_value;
  memcpy(&raw_first_step_value, &tmp_first_step_value, sizeof(tmp_first_step_value));
  if (raw_first_step_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_first_step_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StepsFloatFunctionConfig)
  return target;
}

size_t StepsFloatFunctionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StepsFloatFunctionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float num_steps = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_num_steps = this->_internal_num_steps();
  uint32_t raw_num_steps;
  memcpy(&raw_num_steps, &tmp_num_steps, sizeof(tmp_num_steps));
  if (raw_num_steps != 0) {
    total_size += 1 + 4;
  }

  // float diff_per_step = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diff_per_step = this->_internal_diff_per_step();
  uint32_t raw_diff_per_step;
  memcpy(&raw_diff_per_step, &tmp_diff_per_step, sizeof(tmp_diff_per_step));
  if (raw_diff_per_step != 0) {
    total_size += 1 + 4;
  }

  // float first_step_value = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_first_step_value = this->_internal_first_step_value();
  uint32_t raw_first_step_value;
  memcpy(&raw_first_step_value, &tmp_first_step_value, sizeof(tmp_first_step_value));
  if (raw_first_step_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StepsFloatFunctionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StepsFloatFunctionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StepsFloatFunctionConfig::GetClassData() const { return &_class_data_; }

void StepsFloatFunctionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StepsFloatFunctionConfig *>(to)->MergeFrom(
      static_cast<const StepsFloatFunctionConfig &>(from));
}


void StepsFloatFunctionConfig::MergeFrom(const StepsFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StepsFloatFunctionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_num_steps = from._internal_num_steps();
  uint32_t raw_num_steps;
  memcpy(&raw_num_steps, &tmp_num_steps, sizeof(tmp_num_steps));
  if (raw_num_steps != 0) {
    _internal_set_num_steps(from._internal_num_steps());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diff_per_step = from._internal_diff_per_step();
  uint32_t raw_diff_per_step;
  memcpy(&raw_diff_per_step, &tmp_diff_per_step, sizeof(tmp_diff_per_step));
  if (raw_diff_per_step != 0) {
    _internal_set_diff_per_step(from._internal_diff_per_step());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_first_step_value = from._internal_first_step_value();
  uint32_t raw_first_step_value;
  memcpy(&raw_first_step_value, &tmp_first_step_value, sizeof(tmp_first_step_value));
  if (raw_first_step_value != 0) {
    _internal_set_first_step_value(from._internal_first_step_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StepsFloatFunctionConfig::CopyFrom(const StepsFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StepsFloatFunctionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepsFloatFunctionConfig::IsInitialized() const {
  return true;
}

void StepsFloatFunctionConfig::InternalSwap(StepsFloatFunctionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StepsFloatFunctionConfig, first_step_value_)
      + sizeof(StepsFloatFunctionConfig::first_step_value_)
      - PROTOBUF_FIELD_OFFSET(StepsFloatFunctionConfig, num_steps_)>(
          reinterpret_cast<char*>(&num_steps_),
          reinterpret_cast<char*>(&other->num_steps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StepsFloatFunctionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_functions_2eproto_getter, &descriptor_table_functions_2eproto_once,
      file_level_metadata_functions_2eproto[3]);
}

// ===================================================================

class RepeatFloatFunctionConfig::_Internal {
 public:
  static const ::FloatFunction& functorepeat(const RepeatFloatFunctionConfig* msg);
};

const ::FloatFunction&
RepeatFloatFunctionConfig::_Internal::functorepeat(const RepeatFloatFunctionConfig* msg) {
  return *msg->functorepeat_;
}
RepeatFloatFunctionConfig::RepeatFloatFunctionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RepeatFloatFunctionConfig)
}
RepeatFloatFunctionConfig::RepeatFloatFunctionConfig(const RepeatFloatFunctionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_functorepeat()) {
    functorepeat_ = new ::FloatFunction(*from.functorepeat_);
  } else {
    functorepeat_ = nullptr;
  }
  numberoftimes_ = from.numberoftimes_;
  // @@protoc_insertion_point(copy_constructor:RepeatFloatFunctionConfig)
}

inline void RepeatFloatFunctionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&functorepeat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&numberoftimes_) -
    reinterpret_cast<char*>(&functorepeat_)) + sizeof(numberoftimes_));
}

RepeatFloatFunctionConfig::~RepeatFloatFunctionConfig() {
  // @@protoc_insertion_point(destructor:RepeatFloatFunctionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RepeatFloatFunctionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete functorepeat_;
}

void RepeatFloatFunctionConfig::ArenaDtor(void* object) {
  RepeatFloatFunctionConfig* _this = reinterpret_cast< RepeatFloatFunctionConfig* >(object);
  (void)_this;
}
void RepeatFloatFunctionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RepeatFloatFunctionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RepeatFloatFunctionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:RepeatFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && functorepeat_ != nullptr) {
    delete functorepeat_;
  }
  functorepeat_ = nullptr;
  numberoftimes_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepeatFloatFunctionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float numberOfTimes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          numberoftimes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .FloatFunction funcToRepeat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_functorepeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepeatFloatFunctionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RepeatFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float numberOfTimes = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_numberoftimes = this->_internal_numberoftimes();
  uint32_t raw_numberoftimes;
  memcpy(&raw_numberoftimes, &tmp_numberoftimes, sizeof(tmp_numberoftimes));
  if (raw_numberoftimes != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_numberoftimes(), target);
  }

  // .FloatFunction funcToRepeat = 2;
  if (this->_internal_has_functorepeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::functorepeat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RepeatFloatFunctionConfig)
  return target;
}

size_t RepeatFloatFunctionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RepeatFloatFunctionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction funcToRepeat = 2;
  if (this->_internal_has_functorepeat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *functorepeat_);
  }

  // float numberOfTimes = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_numberoftimes = this->_internal_numberoftimes();
  uint32_t raw_numberoftimes;
  memcpy(&raw_numberoftimes, &tmp_numberoftimes, sizeof(tmp_numberoftimes));
  if (raw_numberoftimes != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepeatFloatFunctionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RepeatFloatFunctionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepeatFloatFunctionConfig::GetClassData() const { return &_class_data_; }

void RepeatFloatFunctionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RepeatFloatFunctionConfig *>(to)->MergeFrom(
      static_cast<const RepeatFloatFunctionConfig &>(from));
}


void RepeatFloatFunctionConfig::MergeFrom(const RepeatFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RepeatFloatFunctionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_functorepeat()) {
    _internal_mutable_functorepeat()->::FloatFunction::MergeFrom(from._internal_functorepeat());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_numberoftimes = from._internal_numberoftimes();
  uint32_t raw_numberoftimes;
  memcpy(&raw_numberoftimes, &tmp_numberoftimes, sizeof(tmp_numberoftimes));
  if (raw_numberoftimes != 0) {
    _internal_set_numberoftimes(from._internal_numberoftimes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepeatFloatFunctionConfig::CopyFrom(const RepeatFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RepeatFloatFunctionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatFloatFunctionConfig::IsInitialized() const {
  return true;
}

void RepeatFloatFunctionConfig::InternalSwap(RepeatFloatFunctionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RepeatFloatFunctionConfig, numberoftimes_)
      + sizeof(RepeatFloatFunctionConfig::numberoftimes_)
      - PROTOBUF_FIELD_OFFSET(RepeatFloatFunctionConfig, functorepeat_)>(
          reinterpret_cast<char*>(&functorepeat_),
          reinterpret_cast<char*>(&other->functorepeat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatFloatFunctionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_functions_2eproto_getter, &descriptor_table_functions_2eproto_once,
      file_level_metadata_functions_2eproto[4]);
}

// ===================================================================

class HalfFloatFunctionConfig::_Internal {
 public:
  static const ::FloatFunction& f1(const HalfFloatFunctionConfig* msg);
  static const ::FloatFunction& f2(const HalfFloatFunctionConfig* msg);
};

const ::FloatFunction&
HalfFloatFunctionConfig::_Internal::f1(const HalfFloatFunctionConfig* msg) {
  return *msg->f1_;
}
const ::FloatFunction&
HalfFloatFunctionConfig::_Internal::f2(const HalfFloatFunctionConfig* msg) {
  return *msg->f2_;
}
HalfFloatFunctionConfig::HalfFloatFunctionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HalfFloatFunctionConfig)
}
HalfFloatFunctionConfig::HalfFloatFunctionConfig(const HalfFloatFunctionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::FloatFunction(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f2()) {
    f2_ = new ::FloatFunction(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HalfFloatFunctionConfig)
}

inline void HalfFloatFunctionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&f1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

HalfFloatFunctionConfig::~HalfFloatFunctionConfig() {
  // @@protoc_insertion_point(destructor:HalfFloatFunctionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HalfFloatFunctionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f2_;
}

void HalfFloatFunctionConfig::ArenaDtor(void* object) {
  HalfFloatFunctionConfig* _this = reinterpret_cast< HalfFloatFunctionConfig* >(object);
  (void)_this;
}
void HalfFloatFunctionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HalfFloatFunctionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HalfFloatFunctionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:HalfFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && f1_ != nullptr) {
    delete f1_;
  }
  f1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && f2_ != nullptr) {
    delete f2_;
  }
  f2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HalfFloatFunctionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FloatFunction f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FloatFunction f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HalfFloatFunctionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HalfFloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FloatFunction f1 = 1;
  if (this->_internal_has_f1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // .FloatFunction f2 = 2;
  if (this->_internal_has_f2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HalfFloatFunctionConfig)
  return target;
}

size_t HalfFloatFunctionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HalfFloatFunctionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction f1 = 1;
  if (this->_internal_has_f1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f1_);
  }

  // .FloatFunction f2 = 2;
  if (this->_internal_has_f2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f2_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HalfFloatFunctionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HalfFloatFunctionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HalfFloatFunctionConfig::GetClassData() const { return &_class_data_; }

void HalfFloatFunctionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HalfFloatFunctionConfig *>(to)->MergeFrom(
      static_cast<const HalfFloatFunctionConfig &>(from));
}


void HalfFloatFunctionConfig::MergeFrom(const HalfFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HalfFloatFunctionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_mutable_f1()->::FloatFunction::MergeFrom(from._internal_f1());
  }
  if (from._internal_has_f2()) {
    _internal_mutable_f2()->::FloatFunction::MergeFrom(from._internal_f2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HalfFloatFunctionConfig::CopyFrom(const HalfFloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HalfFloatFunctionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HalfFloatFunctionConfig::IsInitialized() const {
  return true;
}

void HalfFloatFunctionConfig::InternalSwap(HalfFloatFunctionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HalfFloatFunctionConfig, f2_)
      + sizeof(HalfFloatFunctionConfig::f2_)
      - PROTOBUF_FIELD_OFFSET(HalfFloatFunctionConfig, f1_)>(
          reinterpret_cast<char*>(&f1_),
          reinterpret_cast<char*>(&other->f1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HalfFloatFunctionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_functions_2eproto_getter, &descriptor_table_functions_2eproto_once,
      file_level_metadata_functions_2eproto[5]);
}

// ===================================================================

class Comb2FloatFunctionConfig::_Internal {
 public:
  static const ::FloatFunction& f1(const Comb2FloatFunctionConfig* msg);
  static const ::FloatFunction& f2(const Comb2FloatFunctionConfig* msg);
};

const ::FloatFunction&
Comb2FloatFunctionConfig::_Internal::f1(const Comb2FloatFunctionConfig* msg) {
  return *msg->f1_;
}
const ::FloatFunction&
Comb2FloatFunctionConfig::_Internal::f2(const Comb2FloatFunctionConfig* msg) {
  return *msg->f2_;
}
Comb2FloatFunctionConfig::Comb2FloatFunctionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Comb2FloatFunctionConfig)
}
Comb2FloatFunctionConfig::Comb2FloatFunctionConfig(const Comb2FloatFunctionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::FloatFunction(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f2()) {
    f2_ = new ::FloatFunction(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  ::memcpy(&amount1_, &from.amount1_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount2_) -
    reinterpret_cast<char*>(&amount1_)) + sizeof(amount2_));
  // @@protoc_insertion_point(copy_constructor:Comb2FloatFunctionConfig)
}

inline void Comb2FloatFunctionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&f1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(amount2_));
}

Comb2FloatFunctionConfig::~Comb2FloatFunctionConfig() {
  // @@protoc_insertion_point(destructor:Comb2FloatFunctionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Comb2FloatFunctionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f2_;
}

void Comb2FloatFunctionConfig::ArenaDtor(void* object) {
  Comb2FloatFunctionConfig* _this = reinterpret_cast< Comb2FloatFunctionConfig* >(object);
  (void)_this;
}
void Comb2FloatFunctionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Comb2FloatFunctionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Comb2FloatFunctionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Comb2FloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && f1_ != nullptr) {
    delete f1_;
  }
  f1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && f2_ != nullptr) {
    delete f2_;
  }
  f2_ = nullptr;
  ::memset(&amount1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount2_) -
      reinterpret_cast<char*>(&amount1_)) + sizeof(amount2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Comb2FloatFunctionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FloatFunction f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float amount1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          amount1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .FloatFunction f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float amount2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          amount2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Comb2FloatFunctionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Comb2FloatFunctionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FloatFunction f1 = 1;
  if (this->_internal_has_f1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // float amount1 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_amount1 = this->_internal_amount1();
  uint32_t raw_amount1;
  memcpy(&raw_amount1, &tmp_amount1, sizeof(tmp_amount1));
  if (raw_amount1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_amount1(), target);
  }

  // .FloatFunction f2 = 3;
  if (this->_internal_has_f2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  // float amount2 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_amount2 = this->_internal_amount2();
  uint32_t raw_amount2;
  memcpy(&raw_amount2, &tmp_amount2, sizeof(tmp_amount2));
  if (raw_amount2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_amount2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Comb2FloatFunctionConfig)
  return target;
}

size_t Comb2FloatFunctionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Comb2FloatFunctionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction f1 = 1;
  if (this->_internal_has_f1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f1_);
  }

  // .FloatFunction f2 = 3;
  if (this->_internal_has_f2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f2_);
  }

  // float amount1 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_amount1 = this->_internal_amount1();
  uint32_t raw_amount1;
  memcpy(&raw_amount1, &tmp_amount1, sizeof(tmp_amount1));
  if (raw_amount1 != 0) {
    total_size += 1 + 4;
  }

  // float amount2 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_amount2 = this->_internal_amount2();
  uint32_t raw_amount2;
  memcpy(&raw_amount2, &tmp_amount2, sizeof(tmp_amount2));
  if (raw_amount2 != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Comb2FloatFunctionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Comb2FloatFunctionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Comb2FloatFunctionConfig::GetClassData() const { return &_class_data_; }

void Comb2FloatFunctionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Comb2FloatFunctionConfig *>(to)->MergeFrom(
      static_cast<const Comb2FloatFunctionConfig &>(from));
}


void Comb2FloatFunctionConfig::MergeFrom(const Comb2FloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Comb2FloatFunctionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_mutable_f1()->::FloatFunction::MergeFrom(from._internal_f1());
  }
  if (from._internal_has_f2()) {
    _internal_mutable_f2()->::FloatFunction::MergeFrom(from._internal_f2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_amount1 = from._internal_amount1();
  uint32_t raw_amount1;
  memcpy(&raw_amount1, &tmp_amount1, sizeof(tmp_amount1));
  if (raw_amount1 != 0) {
    _internal_set_amount1(from._internal_amount1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_amount2 = from._internal_amount2();
  uint32_t raw_amount2;
  memcpy(&raw_amount2, &tmp_amount2, sizeof(tmp_amount2));
  if (raw_amount2 != 0) {
    _internal_set_amount2(from._internal_amount2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Comb2FloatFunctionConfig::CopyFrom(const Comb2FloatFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Comb2FloatFunctionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comb2FloatFunctionConfig::IsInitialized() const {
  return true;
}

void Comb2FloatFunctionConfig::InternalSwap(Comb2FloatFunctionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Comb2FloatFunctionConfig, amount2_)
      + sizeof(Comb2FloatFunctionConfig::amount2_)
      - PROTOBUF_FIELD_OFFSET(Comb2FloatFunctionConfig, f1_)>(
          reinterpret_cast<char*>(&f1_),
          reinterpret_cast<char*>(&other->f1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Comb2FloatFunctionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_functions_2eproto_getter, &descriptor_table_functions_2eproto_once,
      file_level_metadata_functions_2eproto[6]);
}

// ===================================================================

class FloatFunction::_Internal {
 public:
  static const ::ConstValueFloatFunctionConfig& const_value(const FloatFunction* msg);
  static const ::LinearFloatFunctionConfig& linear(const FloatFunction* msg);
  static const ::SinFloatFunctionConfig& sin(const FloatFunction* msg);
  static const ::StepsFloatFunctionConfig& steps(const FloatFunction* msg);
  static const ::RepeatFloatFunctionConfig& repeat(const FloatFunction* msg);
  static const ::HalfFloatFunctionConfig& half(const FloatFunction* msg);
  static const ::Comb2FloatFunctionConfig& comb2(const FloatFunction* msg);
};

const ::ConstValueFloatFunctionConfig&
FloatFunction::_Internal::const_value(const FloatFunction* msg) {
  return *msg->function_.const_value_;
}
const ::LinearFloatFunctionConfig&
FloatFunction::_Internal::linear(const FloatFunction* msg) {
  return *msg->function_.linear_;
}
const ::SinFloatFunctionConfig&
FloatFunction::_Internal::sin(const FloatFunction* msg) {
  return *msg->function_.sin_;
}
const ::StepsFloatFunctionConfig&
FloatFunction::_Internal::steps(const FloatFunction* msg) {
  return *msg->function_.steps_;
}
const ::RepeatFloatFunctionConfig&
FloatFunction::_Internal::repeat(const FloatFunction* msg) {
  return *msg->function_.repeat_;
}
const ::HalfFloatFunctionConfig&
FloatFunction::_Internal::half(const FloatFunction* msg) {
  return *msg->function_.half_;
}
const ::Comb2FloatFunctionConfig&
FloatFunction::_Internal::comb2(const FloatFunction* msg) {
  return *msg->function_.comb2_;
}
void FloatFunction::set_allocated_const_value(::ConstValueFloatFunctionConfig* const_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function();
  if (const_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ConstValueFloatFunctionConfig>::GetOwningArena(const_value);
    if (message_arena != submessage_arena) {
      const_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, const_value, submessage_arena);
    }
    set_has_const_value();
    function_.const_value_ = const_value;
  }
  // @@protoc_insertion_point(field_set_allocated:FloatFunction.const_value)
}
void FloatFunction::set_allocated_linear(::LinearFloatFunctionConfig* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function();
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::LinearFloatFunctionConfig>::GetOwningArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    set_has_linear();
    function_.linear_ = linear;
  }
  // @@protoc_insertion_point(field_set_allocated:FloatFunction.linear)
}
void FloatFunction::set_allocated_sin(::SinFloatFunctionConfig* sin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function();
  if (sin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SinFloatFunctionConfig>::GetOwningArena(sin);
    if (message_arena != submessage_arena) {
      sin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sin, submessage_arena);
    }
    set_has_sin();
    function_.sin_ = sin;
  }
  // @@protoc_insertion_point(field_set_allocated:FloatFunction.sin)
}
void FloatFunction::set_allocated_steps(::StepsFloatFunctionConfig* steps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function();
  if (steps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StepsFloatFunctionConfig>::GetOwningArena(steps);
    if (message_arena != submessage_arena) {
      steps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steps, submessage_arena);
    }
    set_has_steps();
    function_.steps_ = steps;
  }
  // @@protoc_insertion_point(field_set_allocated:FloatFunction.steps)
}
void FloatFunction::set_allocated_repeat(::RepeatFloatFunctionConfig* repeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function();
  if (repeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::RepeatFloatFunctionConfig>::GetOwningArena(repeat);
    if (message_arena != submessage_arena) {
      repeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeat, submessage_arena);
    }
    set_has_repeat();
    function_.repeat_ = repeat;
  }
  // @@protoc_insertion_point(field_set_allocated:FloatFunction.repeat)
}
void FloatFunction::set_allocated_half(::HalfFloatFunctionConfig* half) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function();
  if (half) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HalfFloatFunctionConfig>::GetOwningArena(half);
    if (message_arena != submessage_arena) {
      half = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, half, submessage_arena);
    }
    set_has_half();
    function_.half_ = half;
  }
  // @@protoc_insertion_point(field_set_allocated:FloatFunction.half)
}
void FloatFunction::set_allocated_comb2(::Comb2FloatFunctionConfig* comb2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function();
  if (comb2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Comb2FloatFunctionConfig>::GetOwningArena(comb2);
    if (message_arena != submessage_arena) {
      comb2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comb2, submessage_arena);
    }
    set_has_comb2();
    function_.comb2_ = comb2;
  }
  // @@protoc_insertion_point(field_set_allocated:FloatFunction.comb2)
}
FloatFunction::FloatFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FloatFunction)
}
FloatFunction::FloatFunction(const FloatFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_function();
  switch (from.function_case()) {
    case kConstValue: {
      _internal_mutable_const_value()->::ConstValueFloatFunctionConfig::MergeFrom(from._internal_const_value());
      break;
    }
    case kLinear: {
      _internal_mutable_linear()->::LinearFloatFunctionConfig::MergeFrom(from._internal_linear());
      break;
    }
    case kSin: {
      _internal_mutable_sin()->::SinFloatFunctionConfig::MergeFrom(from._internal_sin());
      break;
    }
    case kSteps: {
      _internal_mutable_steps()->::StepsFloatFunctionConfig::MergeFrom(from._internal_steps());
      break;
    }
    case kRepeat: {
      _internal_mutable_repeat()->::RepeatFloatFunctionConfig::MergeFrom(from._internal_repeat());
      break;
    }
    case kHalf: {
      _internal_mutable_half()->::HalfFloatFunctionConfig::MergeFrom(from._internal_half());
      break;
    }
    case kComb2: {
      _internal_mutable_comb2()->::Comb2FloatFunctionConfig::MergeFrom(from._internal_comb2());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:FloatFunction)
}

inline void FloatFunction::SharedCtor() {
clear_has_function();
}

FloatFunction::~FloatFunction() {
  // @@protoc_insertion_point(destructor:FloatFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_function()) {
    clear_function();
  }
}

void FloatFunction::ArenaDtor(void* object) {
  FloatFunction* _this = reinterpret_cast< FloatFunction* >(object);
  (void)_this;
}
void FloatFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatFunction::clear_function() {
// @@protoc_insertion_point(one_of_clear_start:FloatFunction)
  switch (function_case()) {
    case kConstValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete function_.const_value_;
      }
      break;
    }
    case kLinear: {
      if (GetArenaForAllocation() == nullptr) {
        delete function_.linear_;
      }
      break;
    }
    case kSin: {
      if (GetArenaForAllocation() == nullptr) {
        delete function_.sin_;
      }
      break;
    }
    case kSteps: {
      if (GetArenaForAllocation() == nullptr) {
        delete function_.steps_;
      }
      break;
    }
    case kRepeat: {
      if (GetArenaForAllocation() == nullptr) {
        delete function_.repeat_;
      }
      break;
    }
    case kHalf: {
      if (GetArenaForAllocation() == nullptr) {
        delete function_.half_;
      }
      break;
    }
    case kComb2: {
      if (GetArenaForAllocation() == nullptr) {
        delete function_.comb2_;
      }
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FUNCTION_NOT_SET;
}


void FloatFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:FloatFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_function();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ConstValueFloatFunctionConfig const_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_const_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LinearFloatFunctionConfig linear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SinFloatFunctionConfig sin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StepsFloatFunctionConfig steps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_steps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .RepeatFloatFunctionConfig repeat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HalfFloatFunctionConfig half = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_half(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Comb2FloatFunctionConfig comb2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_comb2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FloatFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConstValueFloatFunctionConfig const_value = 1;
  if (_internal_has_const_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::const_value(this), target, stream);
  }

  // .LinearFloatFunctionConfig linear = 2;
  if (_internal_has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::linear(this), target, stream);
  }

  // .SinFloatFunctionConfig sin = 3;
  if (_internal_has_sin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sin(this), target, stream);
  }

  // .StepsFloatFunctionConfig steps = 4;
  if (_internal_has_steps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::steps(this), target, stream);
  }

  // .RepeatFloatFunctionConfig repeat = 5;
  if (_internal_has_repeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::repeat(this), target, stream);
  }

  // .HalfFloatFunctionConfig half = 6;
  if (_internal_has_half()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::half(this), target, stream);
  }

  // .Comb2FloatFunctionConfig comb2 = 7;
  if (_internal_has_comb2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::comb2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FloatFunction)
  return target;
}

size_t FloatFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FloatFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (function_case()) {
    // .ConstValueFloatFunctionConfig const_value = 1;
    case kConstValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.const_value_);
      break;
    }
    // .LinearFloatFunctionConfig linear = 2;
    case kLinear: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.linear_);
      break;
    }
    // .SinFloatFunctionConfig sin = 3;
    case kSin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.sin_);
      break;
    }
    // .StepsFloatFunctionConfig steps = 4;
    case kSteps: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.steps_);
      break;
    }
    // .RepeatFloatFunctionConfig repeat = 5;
    case kRepeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.repeat_);
      break;
    }
    // .HalfFloatFunctionConfig half = 6;
    case kHalf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.half_);
      break;
    }
    // .Comb2FloatFunctionConfig comb2 = 7;
    case kComb2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.comb2_);
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FloatFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatFunction::GetClassData() const { return &_class_data_; }

void FloatFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FloatFunction *>(to)->MergeFrom(
      static_cast<const FloatFunction &>(from));
}


void FloatFunction::MergeFrom(const FloatFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FloatFunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.function_case()) {
    case kConstValue: {
      _internal_mutable_const_value()->::ConstValueFloatFunctionConfig::MergeFrom(from._internal_const_value());
      break;
    }
    case kLinear: {
      _internal_mutable_linear()->::LinearFloatFunctionConfig::MergeFrom(from._internal_linear());
      break;
    }
    case kSin: {
      _internal_mutable_sin()->::SinFloatFunctionConfig::MergeFrom(from._internal_sin());
      break;
    }
    case kSteps: {
      _internal_mutable_steps()->::StepsFloatFunctionConfig::MergeFrom(from._internal_steps());
      break;
    }
    case kRepeat: {
      _internal_mutable_repeat()->::RepeatFloatFunctionConfig::MergeFrom(from._internal_repeat());
      break;
    }
    case kHalf: {
      _internal_mutable_half()->::HalfFloatFunctionConfig::MergeFrom(from._internal_half());
      break;
    }
    case kComb2: {
      _internal_mutable_comb2()->::Comb2FloatFunctionConfig::MergeFrom(from._internal_comb2());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatFunction::CopyFrom(const FloatFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FloatFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatFunction::IsInitialized() const {
  return true;
}

void FloatFunction::InternalSwap(FloatFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(function_, other->function_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_functions_2eproto_getter, &descriptor_table_functions_2eproto_once,
      file_level_metadata_functions_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ConstValueFloatFunctionConfig* Arena::CreateMaybeMessage< ::ConstValueFloatFunctionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConstValueFloatFunctionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::LinearFloatFunctionConfig* Arena::CreateMaybeMessage< ::LinearFloatFunctionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinearFloatFunctionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::SinFloatFunctionConfig* Arena::CreateMaybeMessage< ::SinFloatFunctionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SinFloatFunctionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::StepsFloatFunctionConfig* Arena::CreateMaybeMessage< ::StepsFloatFunctionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepsFloatFunctionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::RepeatFloatFunctionConfig* Arena::CreateMaybeMessage< ::RepeatFloatFunctionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RepeatFloatFunctionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::HalfFloatFunctionConfig* Arena::CreateMaybeMessage< ::HalfFloatFunctionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HalfFloatFunctionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Comb2FloatFunctionConfig* Arena::CreateMaybeMessage< ::Comb2FloatFunctionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Comb2FloatFunctionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::FloatFunction* Arena::CreateMaybeMessage< ::FloatFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FloatFunction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
