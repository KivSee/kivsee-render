// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segments.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_segments_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_segments_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_segments_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_segments_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_segments_2eproto;
namespace kivsee {
namespace proto {
class Pixel;
struct PixelDefaultTypeInternal;
extern PixelDefaultTypeInternal _Pixel_default_instance_;
class Segment;
struct SegmentDefaultTypeInternal;
extern SegmentDefaultTypeInternal _Segment_default_instance_;
class ThingSegments;
struct ThingSegmentsDefaultTypeInternal;
extern ThingSegmentsDefaultTypeInternal _ThingSegments_default_instance_;
}  // namespace proto
}  // namespace kivsee
PROTOBUF_NAMESPACE_OPEN
template<> ::kivsee::proto::Pixel* Arena::CreateMaybeMessage<::kivsee::proto::Pixel>(Arena*);
template<> ::kivsee::proto::Segment* Arena::CreateMaybeMessage<::kivsee::proto::Segment>(Arena*);
template<> ::kivsee::proto::ThingSegments* Arena::CreateMaybeMessage<::kivsee::proto::ThingSegments>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kivsee {
namespace proto {

// ===================================================================

class Pixel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kivsee.proto.Pixel) */ {
 public:
  inline Pixel() : Pixel(nullptr) {}
  ~Pixel() override;
  explicit constexpr Pixel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pixel(const Pixel& from);
  Pixel(Pixel&& from) noexcept
    : Pixel() {
    *this = ::std::move(from);
  }

  inline Pixel& operator=(const Pixel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pixel& operator=(Pixel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pixel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pixel* internal_default_instance() {
    return reinterpret_cast<const Pixel*>(
               &_Pixel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pixel& a, Pixel& b) {
    a.Swap(&b);
  }
  inline void Swap(Pixel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pixel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pixel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pixel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pixel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pixel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pixel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kivsee.proto.Pixel";
  }
  protected:
  explicit Pixel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kRelPosFieldNumber = 2,
  };
  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // float rel_pos = 2;
  void clear_rel_pos();
  float rel_pos() const;
  void set_rel_pos(float value);
  private:
  float _internal_rel_pos() const;
  void _internal_set_rel_pos(float value);
  public:

  // @@protoc_insertion_point(class_scope:kivsee.proto.Pixel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t index_;
  float rel_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_segments_2eproto;
};
// -------------------------------------------------------------------

class Segment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kivsee.proto.Segment) */ {
 public:
  inline Segment() : Segment(nullptr) {}
  ~Segment() override;
  explicit constexpr Segment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Segment(const Segment& from);
  Segment(Segment&& from) noexcept
    : Segment() {
    *this = ::std::move(from);
  }

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment& operator=(Segment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Segment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Segment* internal_default_instance() {
    return reinterpret_cast<const Segment*>(
               &_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Segment& a, Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Segment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Segment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Segment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Segment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kivsee.proto.Segment";
  }
  protected:
  explicit Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixelsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .kivsee.proto.Pixel pixels = 2;
  int pixels_size() const;
  private:
  int _internal_pixels_size() const;
  public:
  void clear_pixels();
  ::kivsee::proto::Pixel* mutable_pixels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kivsee::proto::Pixel >*
      mutable_pixels();
  private:
  const ::kivsee::proto::Pixel& _internal_pixels(int index) const;
  ::kivsee::proto::Pixel* _internal_add_pixels();
  public:
  const ::kivsee::proto::Pixel& pixels(int index) const;
  ::kivsee::proto::Pixel* add_pixels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kivsee::proto::Pixel >&
      pixels() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:kivsee.proto.Segment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kivsee::proto::Pixel > pixels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_segments_2eproto;
};
// -------------------------------------------------------------------

class ThingSegments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kivsee.proto.ThingSegments) */ {
 public:
  inline ThingSegments() : ThingSegments(nullptr) {}
  ~ThingSegments() override;
  explicit constexpr ThingSegments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThingSegments(const ThingSegments& from);
  ThingSegments(ThingSegments&& from) noexcept
    : ThingSegments() {
    *this = ::std::move(from);
  }

  inline ThingSegments& operator=(const ThingSegments& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThingSegments& operator=(ThingSegments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThingSegments& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThingSegments* internal_default_instance() {
    return reinterpret_cast<const ThingSegments*>(
               &_ThingSegments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ThingSegments& a, ThingSegments& b) {
    a.Swap(&b);
  }
  inline void Swap(ThingSegments* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThingSegments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThingSegments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThingSegments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThingSegments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThingSegments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThingSegments* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kivsee.proto.ThingSegments";
  }
  protected:
  explicit ThingSegments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 3,
    kGuidFieldNumber = 1,
    kNumberOfPixelsFieldNumber = 2,
  };
  // repeated .kivsee.proto.Segment segments = 3;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::kivsee::proto::Segment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kivsee::proto::Segment >*
      mutable_segments();
  private:
  const ::kivsee::proto::Segment& _internal_segments(int index) const;
  ::kivsee::proto::Segment* _internal_add_segments();
  public:
  const ::kivsee::proto::Segment& segments(int index) const;
  ::kivsee::proto::Segment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kivsee::proto::Segment >&
      segments() const;

  // fixed32 guid = 1;
  void clear_guid();
  uint32_t guid() const;
  void set_guid(uint32_t value);
  private:
  uint32_t _internal_guid() const;
  void _internal_set_guid(uint32_t value);
  public:

  // uint32 number_of_pixels = 2;
  void clear_number_of_pixels();
  uint32_t number_of_pixels() const;
  void set_number_of_pixels(uint32_t value);
  private:
  uint32_t _internal_number_of_pixels() const;
  void _internal_set_number_of_pixels(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:kivsee.proto.ThingSegments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kivsee::proto::Segment > segments_;
  uint32_t guid_;
  uint32_t number_of_pixels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_segments_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pixel

// uint32 index = 1;
inline void Pixel::clear_index() {
  index_ = 0u;
}
inline uint32_t Pixel::_internal_index() const {
  return index_;
}
inline uint32_t Pixel::index() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.Pixel.index)
  return _internal_index();
}
inline void Pixel::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void Pixel::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:kivsee.proto.Pixel.index)
}

// float rel_pos = 2;
inline void Pixel::clear_rel_pos() {
  rel_pos_ = 0;
}
inline float Pixel::_internal_rel_pos() const {
  return rel_pos_;
}
inline float Pixel::rel_pos() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.Pixel.rel_pos)
  return _internal_rel_pos();
}
inline void Pixel::_internal_set_rel_pos(float value) {
  
  rel_pos_ = value;
}
inline void Pixel::set_rel_pos(float value) {
  _internal_set_rel_pos(value);
  // @@protoc_insertion_point(field_set:kivsee.proto.Pixel.rel_pos)
}

// -------------------------------------------------------------------

// Segment

// string name = 1;
inline void Segment::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Segment::name() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.Segment.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Segment::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kivsee.proto.Segment.name)
}
inline std::string* Segment::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.Segment.name)
  return _s;
}
inline const std::string& Segment::_internal_name() const {
  return name_.Get();
}
inline void Segment::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Segment::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Segment::release_name() {
  // @@protoc_insertion_point(field_release:kivsee.proto.Segment.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Segment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.Segment.name)
}

// repeated .kivsee.proto.Pixel pixels = 2;
inline int Segment::_internal_pixels_size() const {
  return pixels_.size();
}
inline int Segment::pixels_size() const {
  return _internal_pixels_size();
}
inline void Segment::clear_pixels() {
  pixels_.Clear();
}
inline ::kivsee::proto::Pixel* Segment::mutable_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:kivsee.proto.Segment.pixels)
  return pixels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kivsee::proto::Pixel >*
Segment::mutable_pixels() {
  // @@protoc_insertion_point(field_mutable_list:kivsee.proto.Segment.pixels)
  return &pixels_;
}
inline const ::kivsee::proto::Pixel& Segment::_internal_pixels(int index) const {
  return pixels_.Get(index);
}
inline const ::kivsee::proto::Pixel& Segment::pixels(int index) const {
  // @@protoc_insertion_point(field_get:kivsee.proto.Segment.pixels)
  return _internal_pixels(index);
}
inline ::kivsee::proto::Pixel* Segment::_internal_add_pixels() {
  return pixels_.Add();
}
inline ::kivsee::proto::Pixel* Segment::add_pixels() {
  ::kivsee::proto::Pixel* _add = _internal_add_pixels();
  // @@protoc_insertion_point(field_add:kivsee.proto.Segment.pixels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kivsee::proto::Pixel >&
Segment::pixels() const {
  // @@protoc_insertion_point(field_list:kivsee.proto.Segment.pixels)
  return pixels_;
}

// -------------------------------------------------------------------

// ThingSegments

// fixed32 guid = 1;
inline void ThingSegments::clear_guid() {
  guid_ = 0u;
}
inline uint32_t ThingSegments::_internal_guid() const {
  return guid_;
}
inline uint32_t ThingSegments::guid() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.ThingSegments.guid)
  return _internal_guid();
}
inline void ThingSegments::_internal_set_guid(uint32_t value) {
  
  guid_ = value;
}
inline void ThingSegments::set_guid(uint32_t value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:kivsee.proto.ThingSegments.guid)
}

// uint32 number_of_pixels = 2;
inline void ThingSegments::clear_number_of_pixels() {
  number_of_pixels_ = 0u;
}
inline uint32_t ThingSegments::_internal_number_of_pixels() const {
  return number_of_pixels_;
}
inline uint32_t ThingSegments::number_of_pixels() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.ThingSegments.number_of_pixels)
  return _internal_number_of_pixels();
}
inline void ThingSegments::_internal_set_number_of_pixels(uint32_t value) {
  
  number_of_pixels_ = value;
}
inline void ThingSegments::set_number_of_pixels(uint32_t value) {
  _internal_set_number_of_pixels(value);
  // @@protoc_insertion_point(field_set:kivsee.proto.ThingSegments.number_of_pixels)
}

// repeated .kivsee.proto.Segment segments = 3;
inline int ThingSegments::_internal_segments_size() const {
  return segments_.size();
}
inline int ThingSegments::segments_size() const {
  return _internal_segments_size();
}
inline void ThingSegments::clear_segments() {
  segments_.Clear();
}
inline ::kivsee::proto::Segment* ThingSegments::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:kivsee.proto.ThingSegments.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kivsee::proto::Segment >*
ThingSegments::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:kivsee.proto.ThingSegments.segments)
  return &segments_;
}
inline const ::kivsee::proto::Segment& ThingSegments::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::kivsee::proto::Segment& ThingSegments::segments(int index) const {
  // @@protoc_insertion_point(field_get:kivsee.proto.ThingSegments.segments)
  return _internal_segments(index);
}
inline ::kivsee::proto::Segment* ThingSegments::_internal_add_segments() {
  return segments_.Add();
}
inline ::kivsee::proto::Segment* ThingSegments::add_segments() {
  ::kivsee::proto::Segment* _add = _internal_add_segments();
  // @@protoc_insertion_point(field_add:kivsee.proto.ThingSegments.segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kivsee::proto::Segment >&
ThingSegments::segments() const {
  // @@protoc_insertion_point(field_list:kivsee.proto.ThingSegments.segments)
  return segments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace kivsee

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_segments_2eproto
