// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: effects.proto

#include "effects.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr HSV::HSV(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hue_(0)
  , sat_(0)
  , val_(0){}
struct HSVDefaultTypeInternal {
  constexpr HSVDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HSVDefaultTypeInternal() {}
  union {
    HSV _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HSVDefaultTypeInternal _HSV_default_instance_;
constexpr ConstColorEffectConfig::ConstColorEffectConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr){}
struct ConstColorEffectConfigDefaultTypeInternal {
  constexpr ConstColorEffectConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConstColorEffectConfigDefaultTypeInternal() {}
  union {
    ConstColorEffectConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConstColorEffectConfigDefaultTypeInternal _ConstColorEffectConfig_default_instance_;
constexpr RainbowEffectConfig::RainbowEffectConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hue_start_(nullptr)
  , hue_end_(nullptr){}
struct RainbowEffectConfigDefaultTypeInternal {
  constexpr RainbowEffectConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RainbowEffectConfigDefaultTypeInternal() {}
  union {
    RainbowEffectConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RainbowEffectConfigDefaultTypeInternal _RainbowEffectConfig_default_instance_;
constexpr BrightnessEffectConfig::BrightnessEffectConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mult_factor_(nullptr){}
struct BrightnessEffectConfigDefaultTypeInternal {
  constexpr BrightnessEffectConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrightnessEffectConfigDefaultTypeInternal() {}
  union {
    BrightnessEffectConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrightnessEffectConfigDefaultTypeInternal _BrightnessEffectConfig_default_instance_;
constexpr HueEffectConfig::HueEffectConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_factor_(nullptr){}
struct HueEffectConfigDefaultTypeInternal {
  constexpr HueEffectConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HueEffectConfigDefaultTypeInternal() {}
  union {
    HueEffectConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HueEffectConfigDefaultTypeInternal _HueEffectConfig_default_instance_;
constexpr SaturationEffectConfig::SaturationEffectConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mult_factor_(nullptr){}
struct SaturationEffectConfigDefaultTypeInternal {
  constexpr SaturationEffectConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaturationEffectConfigDefaultTypeInternal() {}
  union {
    SaturationEffectConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaturationEffectConfigDefaultTypeInternal _SaturationEffectConfig_default_instance_;
constexpr SnakeEffectConfig::SnakeEffectConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : head_(nullptr)
  , tail_length_(nullptr)
  , cyclic_(false){}
struct SnakeEffectConfigDefaultTypeInternal {
  constexpr SnakeEffectConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnakeEffectConfigDefaultTypeInternal() {}
  union {
    SnakeEffectConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnakeEffectConfigDefaultTypeInternal _SnakeEffectConfig_default_instance_;
constexpr SegmentEffectConfig::SegmentEffectConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct SegmentEffectConfigDefaultTypeInternal {
  constexpr SegmentEffectConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SegmentEffectConfigDefaultTypeInternal() {}
  union {
    SegmentEffectConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SegmentEffectConfigDefaultTypeInternal _SegmentEffectConfig_default_instance_;
constexpr GlitterEffectConfig::GlitterEffectConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intensity_(nullptr)
  , sat_mult_factor_(nullptr){}
struct GlitterEffectConfigDefaultTypeInternal {
  constexpr GlitterEffectConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlitterEffectConfigDefaultTypeInternal() {}
  union {
    GlitterEffectConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlitterEffectConfigDefaultTypeInternal _GlitterEffectConfig_default_instance_;
constexpr AlternateEffectConfig::AlternateEffectConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hue_offset_(nullptr)
  , sat_mult_(nullptr)
  , brightness_mult_(nullptr)
  , numberofpixels_(0u){}
struct AlternateEffectConfigDefaultTypeInternal {
  constexpr AlternateEffectConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlternateEffectConfigDefaultTypeInternal() {}
  union {
    AlternateEffectConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlternateEffectConfigDefaultTypeInternal _AlternateEffectConfig_default_instance_;
constexpr EffectConfig::EffectConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(0u)
  , end_time_(0u)
  , repeat_num_(0)
  , repeat_start_(0)
  , repeat_end_(0){}
struct EffectConfigDefaultTypeInternal {
  constexpr EffectConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EffectConfigDefaultTypeInternal() {}
  union {
    EffectConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EffectConfigDefaultTypeInternal _EffectConfig_default_instance_;
constexpr EffectProto::EffectProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : effect_config_(nullptr)
  , _oneof_case_{}{}
struct EffectProtoDefaultTypeInternal {
  constexpr EffectProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EffectProtoDefaultTypeInternal() {}
  union {
    EffectProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EffectProtoDefaultTypeInternal _EffectProto_default_instance_;
constexpr AnimationProto::AnimationProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : effects_()
  , duration_ms_(0u)
  , num_repeats_(0u){}
struct AnimationProtoDefaultTypeInternal {
  constexpr AnimationProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnimationProtoDefaultTypeInternal() {}
  union {
    AnimationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnimationProtoDefaultTypeInternal _AnimationProto_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_effects_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_effects_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_effects_2eproto = nullptr;

const uint32_t TableStruct_effects_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HSV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HSV, hue_),
  PROTOBUF_FIELD_OFFSET(::HSV, sat_),
  PROTOBUF_FIELD_OFFSET(::HSV, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConstColorEffectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConstColorEffectConfig, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RainbowEffectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RainbowEffectConfig, hue_start_),
  PROTOBUF_FIELD_OFFSET(::RainbowEffectConfig, hue_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrightnessEffectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BrightnessEffectConfig, mult_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HueEffectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HueEffectConfig, offset_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SaturationEffectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SaturationEffectConfig, mult_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnakeEffectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnakeEffectConfig, head_),
  PROTOBUF_FIELD_OFFSET(::SnakeEffectConfig, tail_length_),
  PROTOBUF_FIELD_OFFSET(::SnakeEffectConfig, cyclic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SegmentEffectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SegmentEffectConfig, start_),
  PROTOBUF_FIELD_OFFSET(::SegmentEffectConfig, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GlitterEffectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GlitterEffectConfig, intensity_),
  PROTOBUF_FIELD_OFFSET(::GlitterEffectConfig, sat_mult_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AlternateEffectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AlternateEffectConfig, numberofpixels_),
  PROTOBUF_FIELD_OFFSET(::AlternateEffectConfig, hue_offset_),
  PROTOBUF_FIELD_OFFSET(::AlternateEffectConfig, sat_mult_),
  PROTOBUF_FIELD_OFFSET(::AlternateEffectConfig, brightness_mult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EffectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EffectConfig, start_time_),
  PROTOBUF_FIELD_OFFSET(::EffectConfig, end_time_),
  PROTOBUF_FIELD_OFFSET(::EffectConfig, segments_),
  PROTOBUF_FIELD_OFFSET(::EffectConfig, repeat_num_),
  PROTOBUF_FIELD_OFFSET(::EffectConfig, repeat_start_),
  PROTOBUF_FIELD_OFFSET(::EffectConfig, repeat_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EffectProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::EffectProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EffectProto, effect_config_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::EffectProto, effect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AnimationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AnimationProto, effects_),
  PROTOBUF_FIELD_OFFSET(::AnimationProto, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::AnimationProto, num_repeats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::HSV)},
  { 9, -1, -1, sizeof(::ConstColorEffectConfig)},
  { 16, -1, -1, sizeof(::RainbowEffectConfig)},
  { 24, -1, -1, sizeof(::BrightnessEffectConfig)},
  { 31, -1, -1, sizeof(::HueEffectConfig)},
  { 38, -1, -1, sizeof(::SaturationEffectConfig)},
  { 45, -1, -1, sizeof(::SnakeEffectConfig)},
  { 54, -1, -1, sizeof(::SegmentEffectConfig)},
  { 62, -1, -1, sizeof(::GlitterEffectConfig)},
  { 70, -1, -1, sizeof(::AlternateEffectConfig)},
  { 80, -1, -1, sizeof(::EffectConfig)},
  { 92, -1, -1, sizeof(::EffectProto)},
  { 106, -1, -1, sizeof(::AnimationProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HSV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConstColorEffectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RainbowEffectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BrightnessEffectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HueEffectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SaturationEffectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SnakeEffectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SegmentEffectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GlitterEffectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AlternateEffectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EffectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EffectProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AnimationProto_default_instance_),
};

const char descriptor_table_protodef_effects_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\reffects.proto\032\017functions.proto\",\n\003HSV\022"
  "\013\n\003hue\030\001 \001(\002\022\013\n\003sat\030\002 \001(\002\022\013\n\003val\030\003 \001(\002\"-"
  "\n\026ConstColorEffectConfig\022\023\n\005color\030\001 \001(\0132"
  "\004.HSV\"Y\n\023RainbowEffectConfig\022!\n\thue_star"
  "t\030\001 \001(\0132\016.FloatFunction\022\037\n\007hue_end\030\002 \001(\013"
  "2\016.FloatFunction\"=\n\026BrightnessEffectConf"
  "ig\022#\n\013mult_factor\030\001 \001(\0132\016.FloatFunction\""
  "8\n\017HueEffectConfig\022%\n\roffset_factor\030\001 \001("
  "\0132\016.FloatFunction\"=\n\026SaturationEffectCon"
  "fig\022#\n\013mult_factor\030\001 \001(\0132\016.FloatFunction"
  "\"f\n\021SnakeEffectConfig\022\034\n\004head\030\001 \001(\0132\016.Fl"
  "oatFunction\022#\n\013tail_length\030\002 \001(\0132\016.Float"
  "Function\022\016\n\006cyclic\030\003 \001(\010\"Q\n\023SegmentEffec"
  "tConfig\022\035\n\005start\030\001 \001(\0132\016.FloatFunction\022\033"
  "\n\003end\030\002 \001(\0132\016.FloatFunction\"a\n\023GlitterEf"
  "fectConfig\022!\n\tintensity\030\001 \001(\0132\016.FloatFun"
  "ction\022\'\n\017sat_mult_factor\030\002 \001(\0132\016.FloatFu"
  "nction\"\236\001\n\025AlternateEffectConfig\022\026\n\016numb"
  "erOfPixels\030\001 \001(\r\022\"\n\nhue_offset\030\002 \001(\0132\016.F"
  "loatFunction\022 \n\010sat_mult\030\003 \001(\0132\016.FloatFu"
  "nction\022\'\n\017brightness_mult\030\004 \001(\0132\016.FloatF"
  "unction\"\204\001\n\014EffectConfig\022\022\n\nstart_time\030\001"
  " \001(\r\022\020\n\010end_time\030\002 \001(\r\022\020\n\010segments\030\003 \001(\t"
  "\022\022\n\nrepeat_num\030\004 \001(\002\022\024\n\014repeat_start\030\005 \001"
  "(\002\022\022\n\nrepeat_end\030\006 \001(\002\"\272\002\n\013EffectProto\022$"
  "\n\reffect_config\030\001 \001(\0132\r.EffectConfig\022.\n\013"
  "const_color\030\002 \001(\0132\027.ConstColorEffectConf"
  "igH\000\022\'\n\007rainbow\030\003 \001(\0132\024.RainbowEffectCon"
  "figH\000\022-\n\nbrightness\030\004 \001(\0132\027.BrightnessEf"
  "fectConfigH\000\022\037\n\003hue\030\005 \001(\0132\020.HueEffectCon"
  "figH\000\022-\n\nsaturation\030\006 \001(\0132\027.SaturationEf"
  "fectConfigH\000\022#\n\005snake\030\007 \001(\0132\022.SnakeEffec"
  "tConfigH\000B\010\n\006effect\"Y\n\016AnimationProto\022\035\n"
  "\007effects\030\001 \003(\0132\014.EffectProto\022\023\n\013duration"
  "_ms\030\002 \001(\r\022\023\n\013num_repeats\030\003 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_effects_2eproto_deps[1] = {
  &::descriptor_table_functions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_effects_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_effects_2eproto = {
  false, false, 1398, descriptor_table_protodef_effects_2eproto, "effects.proto", 
  &descriptor_table_effects_2eproto_once, descriptor_table_effects_2eproto_deps, 1, 13,
  schemas, file_default_instances, TableStruct_effects_2eproto::offsets,
  file_level_metadata_effects_2eproto, file_level_enum_descriptors_effects_2eproto, file_level_service_descriptors_effects_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_effects_2eproto_getter() {
  return &descriptor_table_effects_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_effects_2eproto(&descriptor_table_effects_2eproto);

// ===================================================================

class HSV::_Internal {
 public:
};

HSV::HSV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HSV)
}
HSV::HSV(const HSV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hue_, &from.hue_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&hue_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:HSV)
}

inline void HSV::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&hue_)) + sizeof(val_));
}

HSV::~HSV() {
  // @@protoc_insertion_point(destructor:HSV)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HSV::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HSV::ArenaDtor(void* object) {
  HSV* _this = reinterpret_cast< HSV* >(object);
  (void)_this;
}
void HSV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HSV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HSV::Clear() {
// @@protoc_insertion_point(message_clear_start:HSV)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&hue_)) + sizeof(val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HSV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float hue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          hue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float sat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          sat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HSV::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HSV)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float hue = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hue = this->_internal_hue();
  uint32_t raw_hue;
  memcpy(&raw_hue, &tmp_hue, sizeof(tmp_hue));
  if (raw_hue != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_hue(), target);
  }

  // float sat = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sat = this->_internal_sat();
  uint32_t raw_sat;
  memcpy(&raw_sat, &tmp_sat, sizeof(tmp_sat));
  if (raw_sat != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_sat(), target);
  }

  // float val = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val = this->_internal_val();
  uint32_t raw_val;
  memcpy(&raw_val, &tmp_val, sizeof(tmp_val));
  if (raw_val != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HSV)
  return target;
}

size_t HSV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HSV)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float hue = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hue = this->_internal_hue();
  uint32_t raw_hue;
  memcpy(&raw_hue, &tmp_hue, sizeof(tmp_hue));
  if (raw_hue != 0) {
    total_size += 1 + 4;
  }

  // float sat = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sat = this->_internal_sat();
  uint32_t raw_sat;
  memcpy(&raw_sat, &tmp_sat, sizeof(tmp_sat));
  if (raw_sat != 0) {
    total_size += 1 + 4;
  }

  // float val = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val = this->_internal_val();
  uint32_t raw_val;
  memcpy(&raw_val, &tmp_val, sizeof(tmp_val));
  if (raw_val != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HSV::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HSV::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HSV::GetClassData() const { return &_class_data_; }

void HSV::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HSV *>(to)->MergeFrom(
      static_cast<const HSV &>(from));
}


void HSV::MergeFrom(const HSV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HSV)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hue = from._internal_hue();
  uint32_t raw_hue;
  memcpy(&raw_hue, &tmp_hue, sizeof(tmp_hue));
  if (raw_hue != 0) {
    _internal_set_hue(from._internal_hue());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sat = from._internal_sat();
  uint32_t raw_sat;
  memcpy(&raw_sat, &tmp_sat, sizeof(tmp_sat));
  if (raw_sat != 0) {
    _internal_set_sat(from._internal_sat());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val = from._internal_val();
  uint32_t raw_val;
  memcpy(&raw_val, &tmp_val, sizeof(tmp_val));
  if (raw_val != 0) {
    _internal_set_val(from._internal_val());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HSV::CopyFrom(const HSV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HSV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HSV::IsInitialized() const {
  return true;
}

void HSV::InternalSwap(HSV* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HSV, val_)
      + sizeof(HSV::val_)
      - PROTOBUF_FIELD_OFFSET(HSV, hue_)>(
          reinterpret_cast<char*>(&hue_),
          reinterpret_cast<char*>(&other->hue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HSV::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[0]);
}

// ===================================================================

class ConstColorEffectConfig::_Internal {
 public:
  static const ::HSV& color(const ConstColorEffectConfig* msg);
};

const ::HSV&
ConstColorEffectConfig::_Internal::color(const ConstColorEffectConfig* msg) {
  return *msg->color_;
}
ConstColorEffectConfig::ConstColorEffectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConstColorEffectConfig)
}
ConstColorEffectConfig::ConstColorEffectConfig(const ConstColorEffectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::HSV(*from.color_);
  } else {
    color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ConstColorEffectConfig)
}

inline void ConstColorEffectConfig::SharedCtor() {
color_ = nullptr;
}

ConstColorEffectConfig::~ConstColorEffectConfig() {
  // @@protoc_insertion_point(destructor:ConstColorEffectConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConstColorEffectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void ConstColorEffectConfig::ArenaDtor(void* object) {
  ConstColorEffectConfig* _this = reinterpret_cast< ConstColorEffectConfig* >(object);
  (void)_this;
}
void ConstColorEffectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConstColorEffectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConstColorEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ConstColorEffectConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstColorEffectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .HSV color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConstColorEffectConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConstColorEffectConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .HSV color = 1;
  if (this->_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConstColorEffectConfig)
  return target;
}

size_t ConstColorEffectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConstColorEffectConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .HSV color = 1;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConstColorEffectConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConstColorEffectConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConstColorEffectConfig::GetClassData() const { return &_class_data_; }

void ConstColorEffectConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConstColorEffectConfig *>(to)->MergeFrom(
      static_cast<const ConstColorEffectConfig &>(from));
}


void ConstColorEffectConfig::MergeFrom(const ConstColorEffectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConstColorEffectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_color()) {
    _internal_mutable_color()->::HSV::MergeFrom(from._internal_color());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConstColorEffectConfig::CopyFrom(const ConstColorEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConstColorEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstColorEffectConfig::IsInitialized() const {
  return true;
}

void ConstColorEffectConfig::InternalSwap(ConstColorEffectConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstColorEffectConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[1]);
}

// ===================================================================

class RainbowEffectConfig::_Internal {
 public:
  static const ::FloatFunction& hue_start(const RainbowEffectConfig* msg);
  static const ::FloatFunction& hue_end(const RainbowEffectConfig* msg);
};

const ::FloatFunction&
RainbowEffectConfig::_Internal::hue_start(const RainbowEffectConfig* msg) {
  return *msg->hue_start_;
}
const ::FloatFunction&
RainbowEffectConfig::_Internal::hue_end(const RainbowEffectConfig* msg) {
  return *msg->hue_end_;
}
void RainbowEffectConfig::clear_hue_start() {
  if (GetArenaForAllocation() == nullptr && hue_start_ != nullptr) {
    delete hue_start_;
  }
  hue_start_ = nullptr;
}
void RainbowEffectConfig::clear_hue_end() {
  if (GetArenaForAllocation() == nullptr && hue_end_ != nullptr) {
    delete hue_end_;
  }
  hue_end_ = nullptr;
}
RainbowEffectConfig::RainbowEffectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RainbowEffectConfig)
}
RainbowEffectConfig::RainbowEffectConfig(const RainbowEffectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hue_start()) {
    hue_start_ = new ::FloatFunction(*from.hue_start_);
  } else {
    hue_start_ = nullptr;
  }
  if (from._internal_has_hue_end()) {
    hue_end_ = new ::FloatFunction(*from.hue_end_);
  } else {
    hue_end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RainbowEffectConfig)
}

inline void RainbowEffectConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hue_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hue_end_) -
    reinterpret_cast<char*>(&hue_start_)) + sizeof(hue_end_));
}

RainbowEffectConfig::~RainbowEffectConfig() {
  // @@protoc_insertion_point(destructor:RainbowEffectConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RainbowEffectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hue_start_;
  if (this != internal_default_instance()) delete hue_end_;
}

void RainbowEffectConfig::ArenaDtor(void* object) {
  RainbowEffectConfig* _this = reinterpret_cast< RainbowEffectConfig* >(object);
  (void)_this;
}
void RainbowEffectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RainbowEffectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RainbowEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:RainbowEffectConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hue_start_ != nullptr) {
    delete hue_start_;
  }
  hue_start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hue_end_ != nullptr) {
    delete hue_end_;
  }
  hue_end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RainbowEffectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FloatFunction hue_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hue_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FloatFunction hue_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hue_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RainbowEffectConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RainbowEffectConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FloatFunction hue_start = 1;
  if (this->_internal_has_hue_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hue_start(this), target, stream);
  }

  // .FloatFunction hue_end = 2;
  if (this->_internal_has_hue_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hue_end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RainbowEffectConfig)
  return target;
}

size_t RainbowEffectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RainbowEffectConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction hue_start = 1;
  if (this->_internal_has_hue_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hue_start_);
  }

  // .FloatFunction hue_end = 2;
  if (this->_internal_has_hue_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hue_end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RainbowEffectConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RainbowEffectConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RainbowEffectConfig::GetClassData() const { return &_class_data_; }

void RainbowEffectConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RainbowEffectConfig *>(to)->MergeFrom(
      static_cast<const RainbowEffectConfig &>(from));
}


void RainbowEffectConfig::MergeFrom(const RainbowEffectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RainbowEffectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hue_start()) {
    _internal_mutable_hue_start()->::FloatFunction::MergeFrom(from._internal_hue_start());
  }
  if (from._internal_has_hue_end()) {
    _internal_mutable_hue_end()->::FloatFunction::MergeFrom(from._internal_hue_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RainbowEffectConfig::CopyFrom(const RainbowEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RainbowEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RainbowEffectConfig::IsInitialized() const {
  return true;
}

void RainbowEffectConfig::InternalSwap(RainbowEffectConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, hue_end_)
      + sizeof(RainbowEffectConfig::hue_end_)
      - PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, hue_start_)>(
          reinterpret_cast<char*>(&hue_start_),
          reinterpret_cast<char*>(&other->hue_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RainbowEffectConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[2]);
}

// ===================================================================

class BrightnessEffectConfig::_Internal {
 public:
  static const ::FloatFunction& mult_factor(const BrightnessEffectConfig* msg);
};

const ::FloatFunction&
BrightnessEffectConfig::_Internal::mult_factor(const BrightnessEffectConfig* msg) {
  return *msg->mult_factor_;
}
void BrightnessEffectConfig::clear_mult_factor() {
  if (GetArenaForAllocation() == nullptr && mult_factor_ != nullptr) {
    delete mult_factor_;
  }
  mult_factor_ = nullptr;
}
BrightnessEffectConfig::BrightnessEffectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BrightnessEffectConfig)
}
BrightnessEffectConfig::BrightnessEffectConfig(const BrightnessEffectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mult_factor()) {
    mult_factor_ = new ::FloatFunction(*from.mult_factor_);
  } else {
    mult_factor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrightnessEffectConfig)
}

inline void BrightnessEffectConfig::SharedCtor() {
mult_factor_ = nullptr;
}

BrightnessEffectConfig::~BrightnessEffectConfig() {
  // @@protoc_insertion_point(destructor:BrightnessEffectConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BrightnessEffectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mult_factor_;
}

void BrightnessEffectConfig::ArenaDtor(void* object) {
  BrightnessEffectConfig* _this = reinterpret_cast< BrightnessEffectConfig* >(object);
  (void)_this;
}
void BrightnessEffectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BrightnessEffectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BrightnessEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BrightnessEffectConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mult_factor_ != nullptr) {
    delete mult_factor_;
  }
  mult_factor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrightnessEffectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FloatFunction mult_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mult_factor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrightnessEffectConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrightnessEffectConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FloatFunction mult_factor = 1;
  if (this->_internal_has_mult_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mult_factor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrightnessEffectConfig)
  return target;
}

size_t BrightnessEffectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrightnessEffectConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction mult_factor = 1;
  if (this->_internal_has_mult_factor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mult_factor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrightnessEffectConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BrightnessEffectConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrightnessEffectConfig::GetClassData() const { return &_class_data_; }

void BrightnessEffectConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BrightnessEffectConfig *>(to)->MergeFrom(
      static_cast<const BrightnessEffectConfig &>(from));
}


void BrightnessEffectConfig::MergeFrom(const BrightnessEffectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrightnessEffectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mult_factor()) {
    _internal_mutable_mult_factor()->::FloatFunction::MergeFrom(from._internal_mult_factor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrightnessEffectConfig::CopyFrom(const BrightnessEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrightnessEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrightnessEffectConfig::IsInitialized() const {
  return true;
}

void BrightnessEffectConfig::InternalSwap(BrightnessEffectConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mult_factor_, other->mult_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BrightnessEffectConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[3]);
}

// ===================================================================

class HueEffectConfig::_Internal {
 public:
  static const ::FloatFunction& offset_factor(const HueEffectConfig* msg);
};

const ::FloatFunction&
HueEffectConfig::_Internal::offset_factor(const HueEffectConfig* msg) {
  return *msg->offset_factor_;
}
void HueEffectConfig::clear_offset_factor() {
  if (GetArenaForAllocation() == nullptr && offset_factor_ != nullptr) {
    delete offset_factor_;
  }
  offset_factor_ = nullptr;
}
HueEffectConfig::HueEffectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HueEffectConfig)
}
HueEffectConfig::HueEffectConfig(const HueEffectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offset_factor()) {
    offset_factor_ = new ::FloatFunction(*from.offset_factor_);
  } else {
    offset_factor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HueEffectConfig)
}

inline void HueEffectConfig::SharedCtor() {
offset_factor_ = nullptr;
}

HueEffectConfig::~HueEffectConfig() {
  // @@protoc_insertion_point(destructor:HueEffectConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HueEffectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete offset_factor_;
}

void HueEffectConfig::ArenaDtor(void* object) {
  HueEffectConfig* _this = reinterpret_cast< HueEffectConfig* >(object);
  (void)_this;
}
void HueEffectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HueEffectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HueEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:HueEffectConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && offset_factor_ != nullptr) {
    delete offset_factor_;
  }
  offset_factor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HueEffectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FloatFunction offset_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset_factor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HueEffectConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HueEffectConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FloatFunction offset_factor = 1;
  if (this->_internal_has_offset_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offset_factor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HueEffectConfig)
  return target;
}

size_t HueEffectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HueEffectConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction offset_factor = 1;
  if (this->_internal_has_offset_factor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_factor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HueEffectConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HueEffectConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HueEffectConfig::GetClassData() const { return &_class_data_; }

void HueEffectConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HueEffectConfig *>(to)->MergeFrom(
      static_cast<const HueEffectConfig &>(from));
}


void HueEffectConfig::MergeFrom(const HueEffectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HueEffectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_offset_factor()) {
    _internal_mutable_offset_factor()->::FloatFunction::MergeFrom(from._internal_offset_factor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HueEffectConfig::CopyFrom(const HueEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HueEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HueEffectConfig::IsInitialized() const {
  return true;
}

void HueEffectConfig::InternalSwap(HueEffectConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(offset_factor_, other->offset_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HueEffectConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[4]);
}

// ===================================================================

class SaturationEffectConfig::_Internal {
 public:
  static const ::FloatFunction& mult_factor(const SaturationEffectConfig* msg);
};

const ::FloatFunction&
SaturationEffectConfig::_Internal::mult_factor(const SaturationEffectConfig* msg) {
  return *msg->mult_factor_;
}
void SaturationEffectConfig::clear_mult_factor() {
  if (GetArenaForAllocation() == nullptr && mult_factor_ != nullptr) {
    delete mult_factor_;
  }
  mult_factor_ = nullptr;
}
SaturationEffectConfig::SaturationEffectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SaturationEffectConfig)
}
SaturationEffectConfig::SaturationEffectConfig(const SaturationEffectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mult_factor()) {
    mult_factor_ = new ::FloatFunction(*from.mult_factor_);
  } else {
    mult_factor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SaturationEffectConfig)
}

inline void SaturationEffectConfig::SharedCtor() {
mult_factor_ = nullptr;
}

SaturationEffectConfig::~SaturationEffectConfig() {
  // @@protoc_insertion_point(destructor:SaturationEffectConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaturationEffectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mult_factor_;
}

void SaturationEffectConfig::ArenaDtor(void* object) {
  SaturationEffectConfig* _this = reinterpret_cast< SaturationEffectConfig* >(object);
  (void)_this;
}
void SaturationEffectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaturationEffectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaturationEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SaturationEffectConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mult_factor_ != nullptr) {
    delete mult_factor_;
  }
  mult_factor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaturationEffectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FloatFunction mult_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mult_factor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaturationEffectConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaturationEffectConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FloatFunction mult_factor = 1;
  if (this->_internal_has_mult_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mult_factor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaturationEffectConfig)
  return target;
}

size_t SaturationEffectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaturationEffectConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction mult_factor = 1;
  if (this->_internal_has_mult_factor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mult_factor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaturationEffectConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaturationEffectConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaturationEffectConfig::GetClassData() const { return &_class_data_; }

void SaturationEffectConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaturationEffectConfig *>(to)->MergeFrom(
      static_cast<const SaturationEffectConfig &>(from));
}


void SaturationEffectConfig::MergeFrom(const SaturationEffectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SaturationEffectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mult_factor()) {
    _internal_mutable_mult_factor()->::FloatFunction::MergeFrom(from._internal_mult_factor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaturationEffectConfig::CopyFrom(const SaturationEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaturationEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaturationEffectConfig::IsInitialized() const {
  return true;
}

void SaturationEffectConfig::InternalSwap(SaturationEffectConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mult_factor_, other->mult_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaturationEffectConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[5]);
}

// ===================================================================

class SnakeEffectConfig::_Internal {
 public:
  static const ::FloatFunction& head(const SnakeEffectConfig* msg);
  static const ::FloatFunction& tail_length(const SnakeEffectConfig* msg);
};

const ::FloatFunction&
SnakeEffectConfig::_Internal::head(const SnakeEffectConfig* msg) {
  return *msg->head_;
}
const ::FloatFunction&
SnakeEffectConfig::_Internal::tail_length(const SnakeEffectConfig* msg) {
  return *msg->tail_length_;
}
void SnakeEffectConfig::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
void SnakeEffectConfig::clear_tail_length() {
  if (GetArenaForAllocation() == nullptr && tail_length_ != nullptr) {
    delete tail_length_;
  }
  tail_length_ = nullptr;
}
SnakeEffectConfig::SnakeEffectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SnakeEffectConfig)
}
SnakeEffectConfig::SnakeEffectConfig(const SnakeEffectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::FloatFunction(*from.head_);
  } else {
    head_ = nullptr;
  }
  if (from._internal_has_tail_length()) {
    tail_length_ = new ::FloatFunction(*from.tail_length_);
  } else {
    tail_length_ = nullptr;
  }
  cyclic_ = from.cyclic_;
  // @@protoc_insertion_point(copy_constructor:SnakeEffectConfig)
}

inline void SnakeEffectConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cyclic_) -
    reinterpret_cast<char*>(&head_)) + sizeof(cyclic_));
}

SnakeEffectConfig::~SnakeEffectConfig() {
  // @@protoc_insertion_point(destructor:SnakeEffectConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnakeEffectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete tail_length_;
}

void SnakeEffectConfig::ArenaDtor(void* object) {
  SnakeEffectConfig* _this = reinterpret_cast< SnakeEffectConfig* >(object);
  (void)_this;
}
void SnakeEffectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnakeEffectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnakeEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SnakeEffectConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tail_length_ != nullptr) {
    delete tail_length_;
  }
  tail_length_ = nullptr;
  cyclic_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnakeEffectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FloatFunction head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FloatFunction tail_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_length(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cyclic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          cyclic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnakeEffectConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnakeEffectConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FloatFunction head = 1;
  if (this->_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head(this), target, stream);
  }

  // .FloatFunction tail_length = 2;
  if (this->_internal_has_tail_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tail_length(this), target, stream);
  }

  // bool cyclic = 3;
  if (this->_internal_cyclic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_cyclic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnakeEffectConfig)
  return target;
}

size_t SnakeEffectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnakeEffectConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // .FloatFunction tail_length = 2;
  if (this->_internal_has_tail_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tail_length_);
  }

  // bool cyclic = 3;
  if (this->_internal_cyclic() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnakeEffectConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnakeEffectConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnakeEffectConfig::GetClassData() const { return &_class_data_; }

void SnakeEffectConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnakeEffectConfig *>(to)->MergeFrom(
      static_cast<const SnakeEffectConfig &>(from));
}


void SnakeEffectConfig::MergeFrom(const SnakeEffectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SnakeEffectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::FloatFunction::MergeFrom(from._internal_head());
  }
  if (from._internal_has_tail_length()) {
    _internal_mutable_tail_length()->::FloatFunction::MergeFrom(from._internal_tail_length());
  }
  if (from._internal_cyclic() != 0) {
    _internal_set_cyclic(from._internal_cyclic());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnakeEffectConfig::CopyFrom(const SnakeEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnakeEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnakeEffectConfig::IsInitialized() const {
  return true;
}

void SnakeEffectConfig::InternalSwap(SnakeEffectConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, cyclic_)
      + sizeof(SnakeEffectConfig::cyclic_)
      - PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnakeEffectConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[6]);
}

// ===================================================================

class SegmentEffectConfig::_Internal {
 public:
  static const ::FloatFunction& start(const SegmentEffectConfig* msg);
  static const ::FloatFunction& end(const SegmentEffectConfig* msg);
};

const ::FloatFunction&
SegmentEffectConfig::_Internal::start(const SegmentEffectConfig* msg) {
  return *msg->start_;
}
const ::FloatFunction&
SegmentEffectConfig::_Internal::end(const SegmentEffectConfig* msg) {
  return *msg->end_;
}
void SegmentEffectConfig::clear_start() {
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void SegmentEffectConfig::clear_end() {
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
SegmentEffectConfig::SegmentEffectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SegmentEffectConfig)
}
SegmentEffectConfig::SegmentEffectConfig(const SegmentEffectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::FloatFunction(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::FloatFunction(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SegmentEffectConfig)
}

inline void SegmentEffectConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

SegmentEffectConfig::~SegmentEffectConfig() {
  // @@protoc_insertion_point(destructor:SegmentEffectConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SegmentEffectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void SegmentEffectConfig::ArenaDtor(void* object) {
  SegmentEffectConfig* _this = reinterpret_cast< SegmentEffectConfig* >(object);
  (void)_this;
}
void SegmentEffectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentEffectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SegmentEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SegmentEffectConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentEffectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FloatFunction start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FloatFunction end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentEffectConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SegmentEffectConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FloatFunction start = 1;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .FloatFunction end = 2;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SegmentEffectConfig)
  return target;
}

size_t SegmentEffectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SegmentEffectConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction start = 1;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .FloatFunction end = 2;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentEffectConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SegmentEffectConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentEffectConfig::GetClassData() const { return &_class_data_; }

void SegmentEffectConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SegmentEffectConfig *>(to)->MergeFrom(
      static_cast<const SegmentEffectConfig &>(from));
}


void SegmentEffectConfig::MergeFrom(const SegmentEffectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SegmentEffectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _internal_mutable_start()->::FloatFunction::MergeFrom(from._internal_start());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::FloatFunction::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentEffectConfig::CopyFrom(const SegmentEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SegmentEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentEffectConfig::IsInitialized() const {
  return true;
}

void SegmentEffectConfig::InternalSwap(SegmentEffectConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, end_)
      + sizeof(SegmentEffectConfig::end_)
      - PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentEffectConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[7]);
}

// ===================================================================

class GlitterEffectConfig::_Internal {
 public:
  static const ::FloatFunction& intensity(const GlitterEffectConfig* msg);
  static const ::FloatFunction& sat_mult_factor(const GlitterEffectConfig* msg);
};

const ::FloatFunction&
GlitterEffectConfig::_Internal::intensity(const GlitterEffectConfig* msg) {
  return *msg->intensity_;
}
const ::FloatFunction&
GlitterEffectConfig::_Internal::sat_mult_factor(const GlitterEffectConfig* msg) {
  return *msg->sat_mult_factor_;
}
void GlitterEffectConfig::clear_intensity() {
  if (GetArenaForAllocation() == nullptr && intensity_ != nullptr) {
    delete intensity_;
  }
  intensity_ = nullptr;
}
void GlitterEffectConfig::clear_sat_mult_factor() {
  if (GetArenaForAllocation() == nullptr && sat_mult_factor_ != nullptr) {
    delete sat_mult_factor_;
  }
  sat_mult_factor_ = nullptr;
}
GlitterEffectConfig::GlitterEffectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GlitterEffectConfig)
}
GlitterEffectConfig::GlitterEffectConfig(const GlitterEffectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_intensity()) {
    intensity_ = new ::FloatFunction(*from.intensity_);
  } else {
    intensity_ = nullptr;
  }
  if (from._internal_has_sat_mult_factor()) {
    sat_mult_factor_ = new ::FloatFunction(*from.sat_mult_factor_);
  } else {
    sat_mult_factor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GlitterEffectConfig)
}

inline void GlitterEffectConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&intensity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sat_mult_factor_) -
    reinterpret_cast<char*>(&intensity_)) + sizeof(sat_mult_factor_));
}

GlitterEffectConfig::~GlitterEffectConfig() {
  // @@protoc_insertion_point(destructor:GlitterEffectConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlitterEffectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete intensity_;
  if (this != internal_default_instance()) delete sat_mult_factor_;
}

void GlitterEffectConfig::ArenaDtor(void* object) {
  GlitterEffectConfig* _this = reinterpret_cast< GlitterEffectConfig* >(object);
  (void)_this;
}
void GlitterEffectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlitterEffectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlitterEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GlitterEffectConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && intensity_ != nullptr) {
    delete intensity_;
  }
  intensity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sat_mult_factor_ != nullptr) {
    delete sat_mult_factor_;
  }
  sat_mult_factor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlitterEffectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FloatFunction intensity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_intensity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FloatFunction sat_mult_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sat_mult_factor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlitterEffectConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GlitterEffectConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FloatFunction intensity = 1;
  if (this->_internal_has_intensity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::intensity(this), target, stream);
  }

  // .FloatFunction sat_mult_factor = 2;
  if (this->_internal_has_sat_mult_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sat_mult_factor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GlitterEffectConfig)
  return target;
}

size_t GlitterEffectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GlitterEffectConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction intensity = 1;
  if (this->_internal_has_intensity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intensity_);
  }

  // .FloatFunction sat_mult_factor = 2;
  if (this->_internal_has_sat_mult_factor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sat_mult_factor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlitterEffectConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlitterEffectConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlitterEffectConfig::GetClassData() const { return &_class_data_; }

void GlitterEffectConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GlitterEffectConfig *>(to)->MergeFrom(
      static_cast<const GlitterEffectConfig &>(from));
}


void GlitterEffectConfig::MergeFrom(const GlitterEffectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GlitterEffectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_intensity()) {
    _internal_mutable_intensity()->::FloatFunction::MergeFrom(from._internal_intensity());
  }
  if (from._internal_has_sat_mult_factor()) {
    _internal_mutable_sat_mult_factor()->::FloatFunction::MergeFrom(from._internal_sat_mult_factor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlitterEffectConfig::CopyFrom(const GlitterEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GlitterEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlitterEffectConfig::IsInitialized() const {
  return true;
}

void GlitterEffectConfig::InternalSwap(GlitterEffectConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, sat_mult_factor_)
      + sizeof(GlitterEffectConfig::sat_mult_factor_)
      - PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, intensity_)>(
          reinterpret_cast<char*>(&intensity_),
          reinterpret_cast<char*>(&other->intensity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlitterEffectConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[8]);
}

// ===================================================================

class AlternateEffectConfig::_Internal {
 public:
  static const ::FloatFunction& hue_offset(const AlternateEffectConfig* msg);
  static const ::FloatFunction& sat_mult(const AlternateEffectConfig* msg);
  static const ::FloatFunction& brightness_mult(const AlternateEffectConfig* msg);
};

const ::FloatFunction&
AlternateEffectConfig::_Internal::hue_offset(const AlternateEffectConfig* msg) {
  return *msg->hue_offset_;
}
const ::FloatFunction&
AlternateEffectConfig::_Internal::sat_mult(const AlternateEffectConfig* msg) {
  return *msg->sat_mult_;
}
const ::FloatFunction&
AlternateEffectConfig::_Internal::brightness_mult(const AlternateEffectConfig* msg) {
  return *msg->brightness_mult_;
}
void AlternateEffectConfig::clear_hue_offset() {
  if (GetArenaForAllocation() == nullptr && hue_offset_ != nullptr) {
    delete hue_offset_;
  }
  hue_offset_ = nullptr;
}
void AlternateEffectConfig::clear_sat_mult() {
  if (GetArenaForAllocation() == nullptr && sat_mult_ != nullptr) {
    delete sat_mult_;
  }
  sat_mult_ = nullptr;
}
void AlternateEffectConfig::clear_brightness_mult() {
  if (GetArenaForAllocation() == nullptr && brightness_mult_ != nullptr) {
    delete brightness_mult_;
  }
  brightness_mult_ = nullptr;
}
AlternateEffectConfig::AlternateEffectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AlternateEffectConfig)
}
AlternateEffectConfig::AlternateEffectConfig(const AlternateEffectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hue_offset()) {
    hue_offset_ = new ::FloatFunction(*from.hue_offset_);
  } else {
    hue_offset_ = nullptr;
  }
  if (from._internal_has_sat_mult()) {
    sat_mult_ = new ::FloatFunction(*from.sat_mult_);
  } else {
    sat_mult_ = nullptr;
  }
  if (from._internal_has_brightness_mult()) {
    brightness_mult_ = new ::FloatFunction(*from.brightness_mult_);
  } else {
    brightness_mult_ = nullptr;
  }
  numberofpixels_ = from.numberofpixels_;
  // @@protoc_insertion_point(copy_constructor:AlternateEffectConfig)
}

inline void AlternateEffectConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hue_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&numberofpixels_) -
    reinterpret_cast<char*>(&hue_offset_)) + sizeof(numberofpixels_));
}

AlternateEffectConfig::~AlternateEffectConfig() {
  // @@protoc_insertion_point(destructor:AlternateEffectConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AlternateEffectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hue_offset_;
  if (this != internal_default_instance()) delete sat_mult_;
  if (this != internal_default_instance()) delete brightness_mult_;
}

void AlternateEffectConfig::ArenaDtor(void* object) {
  AlternateEffectConfig* _this = reinterpret_cast< AlternateEffectConfig* >(object);
  (void)_this;
}
void AlternateEffectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlternateEffectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlternateEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:AlternateEffectConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hue_offset_ != nullptr) {
    delete hue_offset_;
  }
  hue_offset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sat_mult_ != nullptr) {
    delete sat_mult_;
  }
  sat_mult_ = nullptr;
  if (GetArenaForAllocation() == nullptr && brightness_mult_ != nullptr) {
    delete brightness_mult_;
  }
  brightness_mult_ = nullptr;
  numberofpixels_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlternateEffectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 numberOfPixels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          numberofpixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FloatFunction hue_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hue_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FloatFunction sat_mult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sat_mult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FloatFunction brightness_mult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_brightness_mult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlternateEffectConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlternateEffectConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 numberOfPixels = 1;
  if (this->_internal_numberofpixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_numberofpixels(), target);
  }

  // .FloatFunction hue_offset = 2;
  if (this->_internal_has_hue_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hue_offset(this), target, stream);
  }

  // .FloatFunction sat_mult = 3;
  if (this->_internal_has_sat_mult()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sat_mult(this), target, stream);
  }

  // .FloatFunction brightness_mult = 4;
  if (this->_internal_has_brightness_mult()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::brightness_mult(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlternateEffectConfig)
  return target;
}

size_t AlternateEffectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlternateEffectConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatFunction hue_offset = 2;
  if (this->_internal_has_hue_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hue_offset_);
  }

  // .FloatFunction sat_mult = 3;
  if (this->_internal_has_sat_mult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sat_mult_);
  }

  // .FloatFunction brightness_mult = 4;
  if (this->_internal_has_brightness_mult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *brightness_mult_);
  }

  // uint32 numberOfPixels = 1;
  if (this->_internal_numberofpixels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_numberofpixels());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlternateEffectConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AlternateEffectConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlternateEffectConfig::GetClassData() const { return &_class_data_; }

void AlternateEffectConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AlternateEffectConfig *>(to)->MergeFrom(
      static_cast<const AlternateEffectConfig &>(from));
}


void AlternateEffectConfig::MergeFrom(const AlternateEffectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AlternateEffectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hue_offset()) {
    _internal_mutable_hue_offset()->::FloatFunction::MergeFrom(from._internal_hue_offset());
  }
  if (from._internal_has_sat_mult()) {
    _internal_mutable_sat_mult()->::FloatFunction::MergeFrom(from._internal_sat_mult());
  }
  if (from._internal_has_brightness_mult()) {
    _internal_mutable_brightness_mult()->::FloatFunction::MergeFrom(from._internal_brightness_mult());
  }
  if (from._internal_numberofpixels() != 0) {
    _internal_set_numberofpixels(from._internal_numberofpixels());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlternateEffectConfig::CopyFrom(const AlternateEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlternateEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlternateEffectConfig::IsInitialized() const {
  return true;
}

void AlternateEffectConfig::InternalSwap(AlternateEffectConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, numberofpixels_)
      + sizeof(AlternateEffectConfig::numberofpixels_)
      - PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, hue_offset_)>(
          reinterpret_cast<char*>(&hue_offset_),
          reinterpret_cast<char*>(&other->hue_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlternateEffectConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[9]);
}

// ===================================================================

class EffectConfig::_Internal {
 public:
};

EffectConfig::EffectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EffectConfig)
}
EffectConfig::EffectConfig(const EffectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  segments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    segments_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_segments().empty()) {
    segments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_segments(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeat_end_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(repeat_end_));
  // @@protoc_insertion_point(copy_constructor:EffectConfig)
}

inline void EffectConfig::SharedCtor() {
segments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  segments_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&repeat_end_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(repeat_end_));
}

EffectConfig::~EffectConfig() {
  // @@protoc_insertion_point(destructor:EffectConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EffectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  segments_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EffectConfig::ArenaDtor(void* object) {
  EffectConfig* _this = reinterpret_cast< EffectConfig* >(object);
  (void)_this;
}
void EffectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EffectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:EffectConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.ClearToEmpty();
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeat_end_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(repeat_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EffectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string segments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_segments();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EffectConfig.segments"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float repeat_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          repeat_num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float repeat_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          repeat_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float repeat_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          repeat_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EffectConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EffectConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_time = 1;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_time(), target);
  }

  // uint32 end_time = 2;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end_time(), target);
  }

  // string segments = 3;
  if (!this->_internal_segments().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_segments().data(), static_cast<int>(this->_internal_segments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EffectConfig.segments");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_segments(), target);
  }

  // float repeat_num = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeat_num = this->_internal_repeat_num();
  uint32_t raw_repeat_num;
  memcpy(&raw_repeat_num, &tmp_repeat_num, sizeof(tmp_repeat_num));
  if (raw_repeat_num != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_repeat_num(), target);
  }

  // float repeat_start = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeat_start = this->_internal_repeat_start();
  uint32_t raw_repeat_start;
  memcpy(&raw_repeat_start, &tmp_repeat_start, sizeof(tmp_repeat_start));
  if (raw_repeat_start != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_repeat_start(), target);
  }

  // float repeat_end = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeat_end = this->_internal_repeat_end();
  uint32_t raw_repeat_end;
  memcpy(&raw_repeat_end, &tmp_repeat_end, sizeof(tmp_repeat_end));
  if (raw_repeat_end != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_repeat_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EffectConfig)
  return target;
}

size_t EffectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EffectConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string segments = 3;
  if (!this->_internal_segments().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_segments());
  }

  // uint32 start_time = 1;
  if (this->_internal_start_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_time());
  }

  // uint32 end_time = 2;
  if (this->_internal_end_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_end_time());
  }

  // float repeat_num = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeat_num = this->_internal_repeat_num();
  uint32_t raw_repeat_num;
  memcpy(&raw_repeat_num, &tmp_repeat_num, sizeof(tmp_repeat_num));
  if (raw_repeat_num != 0) {
    total_size += 1 + 4;
  }

  // float repeat_start = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeat_start = this->_internal_repeat_start();
  uint32_t raw_repeat_start;
  memcpy(&raw_repeat_start, &tmp_repeat_start, sizeof(tmp_repeat_start));
  if (raw_repeat_start != 0) {
    total_size += 1 + 4;
  }

  // float repeat_end = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeat_end = this->_internal_repeat_end();
  uint32_t raw_repeat_end;
  memcpy(&raw_repeat_end, &tmp_repeat_end, sizeof(tmp_repeat_end));
  if (raw_repeat_end != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EffectConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EffectConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EffectConfig::GetClassData() const { return &_class_data_; }

void EffectConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EffectConfig *>(to)->MergeFrom(
      static_cast<const EffectConfig &>(from));
}


void EffectConfig::MergeFrom(const EffectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EffectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_segments().empty()) {
    _internal_set_segments(from._internal_segments());
  }
  if (from._internal_start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeat_num = from._internal_repeat_num();
  uint32_t raw_repeat_num;
  memcpy(&raw_repeat_num, &tmp_repeat_num, sizeof(tmp_repeat_num));
  if (raw_repeat_num != 0) {
    _internal_set_repeat_num(from._internal_repeat_num());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeat_start = from._internal_repeat_start();
  uint32_t raw_repeat_start;
  memcpy(&raw_repeat_start, &tmp_repeat_start, sizeof(tmp_repeat_start));
  if (raw_repeat_start != 0) {
    _internal_set_repeat_start(from._internal_repeat_start());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_repeat_end = from._internal_repeat_end();
  uint32_t raw_repeat_end;
  memcpy(&raw_repeat_end, &tmp_repeat_end, sizeof(tmp_repeat_end));
  if (raw_repeat_end != 0) {
    _internal_set_repeat_end(from._internal_repeat_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EffectConfig::CopyFrom(const EffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectConfig::IsInitialized() const {
  return true;
}

void EffectConfig::InternalSwap(EffectConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &segments_, lhs_arena,
      &other->segments_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EffectConfig, repeat_end_)
      + sizeof(EffectConfig::repeat_end_)
      - PROTOBUF_FIELD_OFFSET(EffectConfig, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[10]);
}

// ===================================================================

class EffectProto::_Internal {
 public:
  static const ::EffectConfig& effect_config(const EffectProto* msg);
  static const ::ConstColorEffectConfig& const_color(const EffectProto* msg);
  static const ::RainbowEffectConfig& rainbow(const EffectProto* msg);
  static const ::BrightnessEffectConfig& brightness(const EffectProto* msg);
  static const ::HueEffectConfig& hue(const EffectProto* msg);
  static const ::SaturationEffectConfig& saturation(const EffectProto* msg);
  static const ::SnakeEffectConfig& snake(const EffectProto* msg);
};

const ::EffectConfig&
EffectProto::_Internal::effect_config(const EffectProto* msg) {
  return *msg->effect_config_;
}
const ::ConstColorEffectConfig&
EffectProto::_Internal::const_color(const EffectProto* msg) {
  return *msg->effect_.const_color_;
}
const ::RainbowEffectConfig&
EffectProto::_Internal::rainbow(const EffectProto* msg) {
  return *msg->effect_.rainbow_;
}
const ::BrightnessEffectConfig&
EffectProto::_Internal::brightness(const EffectProto* msg) {
  return *msg->effect_.brightness_;
}
const ::HueEffectConfig&
EffectProto::_Internal::hue(const EffectProto* msg) {
  return *msg->effect_.hue_;
}
const ::SaturationEffectConfig&
EffectProto::_Internal::saturation(const EffectProto* msg) {
  return *msg->effect_.saturation_;
}
const ::SnakeEffectConfig&
EffectProto::_Internal::snake(const EffectProto* msg) {
  return *msg->effect_.snake_;
}
void EffectProto::set_allocated_const_color(::ConstColorEffectConfig* const_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_effect();
  if (const_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ConstColorEffectConfig>::GetOwningArena(const_color);
    if (message_arena != submessage_arena) {
      const_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, const_color, submessage_arena);
    }
    set_has_const_color();
    effect_.const_color_ = const_color;
  }
  // @@protoc_insertion_point(field_set_allocated:EffectProto.const_color)
}
void EffectProto::set_allocated_rainbow(::RainbowEffectConfig* rainbow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_effect();
  if (rainbow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::RainbowEffectConfig>::GetOwningArena(rainbow);
    if (message_arena != submessage_arena) {
      rainbow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rainbow, submessage_arena);
    }
    set_has_rainbow();
    effect_.rainbow_ = rainbow;
  }
  // @@protoc_insertion_point(field_set_allocated:EffectProto.rainbow)
}
void EffectProto::set_allocated_brightness(::BrightnessEffectConfig* brightness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_effect();
  if (brightness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::BrightnessEffectConfig>::GetOwningArena(brightness);
    if (message_arena != submessage_arena) {
      brightness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brightness, submessage_arena);
    }
    set_has_brightness();
    effect_.brightness_ = brightness;
  }
  // @@protoc_insertion_point(field_set_allocated:EffectProto.brightness)
}
void EffectProto::set_allocated_hue(::HueEffectConfig* hue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_effect();
  if (hue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HueEffectConfig>::GetOwningArena(hue);
    if (message_arena != submessage_arena) {
      hue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hue, submessage_arena);
    }
    set_has_hue();
    effect_.hue_ = hue;
  }
  // @@protoc_insertion_point(field_set_allocated:EffectProto.hue)
}
void EffectProto::set_allocated_saturation(::SaturationEffectConfig* saturation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_effect();
  if (saturation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SaturationEffectConfig>::GetOwningArena(saturation);
    if (message_arena != submessage_arena) {
      saturation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saturation, submessage_arena);
    }
    set_has_saturation();
    effect_.saturation_ = saturation;
  }
  // @@protoc_insertion_point(field_set_allocated:EffectProto.saturation)
}
void EffectProto::set_allocated_snake(::SnakeEffectConfig* snake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_effect();
  if (snake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SnakeEffectConfig>::GetOwningArena(snake);
    if (message_arena != submessage_arena) {
      snake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snake, submessage_arena);
    }
    set_has_snake();
    effect_.snake_ = snake;
  }
  // @@protoc_insertion_point(field_set_allocated:EffectProto.snake)
}
EffectProto::EffectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EffectProto)
}
EffectProto::EffectProto(const EffectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_effect_config()) {
    effect_config_ = new ::EffectConfig(*from.effect_config_);
  } else {
    effect_config_ = nullptr;
  }
  clear_has_effect();
  switch (from.effect_case()) {
    case kConstColor: {
      _internal_mutable_const_color()->::ConstColorEffectConfig::MergeFrom(from._internal_const_color());
      break;
    }
    case kRainbow: {
      _internal_mutable_rainbow()->::RainbowEffectConfig::MergeFrom(from._internal_rainbow());
      break;
    }
    case kBrightness: {
      _internal_mutable_brightness()->::BrightnessEffectConfig::MergeFrom(from._internal_brightness());
      break;
    }
    case kHue: {
      _internal_mutable_hue()->::HueEffectConfig::MergeFrom(from._internal_hue());
      break;
    }
    case kSaturation: {
      _internal_mutable_saturation()->::SaturationEffectConfig::MergeFrom(from._internal_saturation());
      break;
    }
    case kSnake: {
      _internal_mutable_snake()->::SnakeEffectConfig::MergeFrom(from._internal_snake());
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:EffectProto)
}

inline void EffectProto::SharedCtor() {
effect_config_ = nullptr;
clear_has_effect();
}

EffectProto::~EffectProto() {
  // @@protoc_insertion_point(destructor:EffectProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EffectProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete effect_config_;
  if (has_effect()) {
    clear_effect();
  }
}

void EffectProto::ArenaDtor(void* object) {
  EffectProto* _this = reinterpret_cast< EffectProto* >(object);
  (void)_this;
}
void EffectProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EffectProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EffectProto::clear_effect() {
// @@protoc_insertion_point(one_of_clear_start:EffectProto)
  switch (effect_case()) {
    case kConstColor: {
      if (GetArenaForAllocation() == nullptr) {
        delete effect_.const_color_;
      }
      break;
    }
    case kRainbow: {
      if (GetArenaForAllocation() == nullptr) {
        delete effect_.rainbow_;
      }
      break;
    }
    case kBrightness: {
      if (GetArenaForAllocation() == nullptr) {
        delete effect_.brightness_;
      }
      break;
    }
    case kHue: {
      if (GetArenaForAllocation() == nullptr) {
        delete effect_.hue_;
      }
      break;
    }
    case kSaturation: {
      if (GetArenaForAllocation() == nullptr) {
        delete effect_.saturation_;
      }
      break;
    }
    case kSnake: {
      if (GetArenaForAllocation() == nullptr) {
        delete effect_.snake_;
      }
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EFFECT_NOT_SET;
}


void EffectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:EffectProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && effect_config_ != nullptr) {
    delete effect_config_;
  }
  effect_config_ = nullptr;
  clear_effect();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EffectProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .EffectConfig effect_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ConstColorEffectConfig const_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_const_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .RainbowEffectConfig rainbow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rainbow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BrightnessEffectConfig brightness = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_brightness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HueEffectConfig hue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SaturationEffectConfig saturation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_saturation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SnakeEffectConfig snake = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_snake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EffectProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EffectProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .EffectConfig effect_config = 1;
  if (this->_internal_has_effect_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::effect_config(this), target, stream);
  }

  // .ConstColorEffectConfig const_color = 2;
  if (_internal_has_const_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::const_color(this), target, stream);
  }

  // .RainbowEffectConfig rainbow = 3;
  if (_internal_has_rainbow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rainbow(this), target, stream);
  }

  // .BrightnessEffectConfig brightness = 4;
  if (_internal_has_brightness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::brightness(this), target, stream);
  }

  // .HueEffectConfig hue = 5;
  if (_internal_has_hue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hue(this), target, stream);
  }

  // .SaturationEffectConfig saturation = 6;
  if (_internal_has_saturation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::saturation(this), target, stream);
  }

  // .SnakeEffectConfig snake = 7;
  if (_internal_has_snake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::snake(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EffectProto)
  return target;
}

size_t EffectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EffectProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .EffectConfig effect_config = 1;
  if (this->_internal_has_effect_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effect_config_);
  }

  switch (effect_case()) {
    // .ConstColorEffectConfig const_color = 2;
    case kConstColor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_.const_color_);
      break;
    }
    // .RainbowEffectConfig rainbow = 3;
    case kRainbow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_.rainbow_);
      break;
    }
    // .BrightnessEffectConfig brightness = 4;
    case kBrightness: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_.brightness_);
      break;
    }
    // .HueEffectConfig hue = 5;
    case kHue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_.hue_);
      break;
    }
    // .SaturationEffectConfig saturation = 6;
    case kSaturation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_.saturation_);
      break;
    }
    // .SnakeEffectConfig snake = 7;
    case kSnake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_.snake_);
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EffectProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EffectProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EffectProto::GetClassData() const { return &_class_data_; }

void EffectProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EffectProto *>(to)->MergeFrom(
      static_cast<const EffectProto &>(from));
}


void EffectProto::MergeFrom(const EffectProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EffectProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_effect_config()) {
    _internal_mutable_effect_config()->::EffectConfig::MergeFrom(from._internal_effect_config());
  }
  switch (from.effect_case()) {
    case kConstColor: {
      _internal_mutable_const_color()->::ConstColorEffectConfig::MergeFrom(from._internal_const_color());
      break;
    }
    case kRainbow: {
      _internal_mutable_rainbow()->::RainbowEffectConfig::MergeFrom(from._internal_rainbow());
      break;
    }
    case kBrightness: {
      _internal_mutable_brightness()->::BrightnessEffectConfig::MergeFrom(from._internal_brightness());
      break;
    }
    case kHue: {
      _internal_mutable_hue()->::HueEffectConfig::MergeFrom(from._internal_hue());
      break;
    }
    case kSaturation: {
      _internal_mutable_saturation()->::SaturationEffectConfig::MergeFrom(from._internal_saturation());
      break;
    }
    case kSnake: {
      _internal_mutable_snake()->::SnakeEffectConfig::MergeFrom(from._internal_snake());
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EffectProto::CopyFrom(const EffectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EffectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectProto::IsInitialized() const {
  return true;
}

void EffectProto::InternalSwap(EffectProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(effect_config_, other->effect_config_);
  swap(effect_, other->effect_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[11]);
}

// ===================================================================

class AnimationProto::_Internal {
 public:
};

AnimationProto::AnimationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  effects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AnimationProto)
}
AnimationProto::AnimationProto(const AnimationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      effects_(from.effects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_repeats_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(num_repeats_));
  // @@protoc_insertion_point(copy_constructor:AnimationProto)
}

inline void AnimationProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_repeats_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(num_repeats_));
}

AnimationProto::~AnimationProto() {
  // @@protoc_insertion_point(destructor:AnimationProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnimationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnimationProto::ArenaDtor(void* object) {
  AnimationProto* _this = reinterpret_cast< AnimationProto* >(object);
  (void)_this;
}
void AnimationProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnimationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnimationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:AnimationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effects_.Clear();
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_repeats_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(num_repeats_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .EffectProto effects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_repeats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          num_repeats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnimationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnimationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EffectProto effects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_effects(i), target, stream);
  }

  // uint32 duration_ms = 2;
  if (this->_internal_duration_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration_ms(), target);
  }

  // uint32 num_repeats = 3;
  if (this->_internal_num_repeats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_repeats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnimationProto)
  return target;
}

size_t AnimationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnimationProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EffectProto effects = 1;
  total_size += 1UL * this->_internal_effects_size();
  for (const auto& msg : this->effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 duration_ms = 2;
  if (this->_internal_duration_ms() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_ms());
  }

  // uint32 num_repeats = 3;
  if (this->_internal_num_repeats() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_repeats());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnimationProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnimationProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnimationProto::GetClassData() const { return &_class_data_; }

void AnimationProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnimationProto *>(to)->MergeFrom(
      static_cast<const AnimationProto &>(from));
}


void AnimationProto::MergeFrom(const AnimationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnimationProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  effects_.MergeFrom(from.effects_);
  if (from._internal_duration_ms() != 0) {
    _internal_set_duration_ms(from._internal_duration_ms());
  }
  if (from._internal_num_repeats() != 0) {
    _internal_set_num_repeats(from._internal_num_repeats());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationProto::CopyFrom(const AnimationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnimationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationProto::IsInitialized() const {
  return true;
}

void AnimationProto::InternalSwap(AnimationProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  effects_.InternalSwap(&other->effects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationProto, num_repeats_)
      + sizeof(AnimationProto::num_repeats_)
      - PROTOBUF_FIELD_OFFSET(AnimationProto, duration_ms_)>(
          reinterpret_cast<char*>(&duration_ms_),
          reinterpret_cast<char*>(&other->duration_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_effects_2eproto_getter, &descriptor_table_effects_2eproto_once,
      file_level_metadata_effects_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HSV* Arena::CreateMaybeMessage< ::HSV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HSV >(arena);
}
template<> PROTOBUF_NOINLINE ::ConstColorEffectConfig* Arena::CreateMaybeMessage< ::ConstColorEffectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConstColorEffectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::RainbowEffectConfig* Arena::CreateMaybeMessage< ::RainbowEffectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RainbowEffectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BrightnessEffectConfig* Arena::CreateMaybeMessage< ::BrightnessEffectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BrightnessEffectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::HueEffectConfig* Arena::CreateMaybeMessage< ::HueEffectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HueEffectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::SaturationEffectConfig* Arena::CreateMaybeMessage< ::SaturationEffectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SaturationEffectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::SnakeEffectConfig* Arena::CreateMaybeMessage< ::SnakeEffectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnakeEffectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::SegmentEffectConfig* Arena::CreateMaybeMessage< ::SegmentEffectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SegmentEffectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::GlitterEffectConfig* Arena::CreateMaybeMessage< ::GlitterEffectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GlitterEffectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::AlternateEffectConfig* Arena::CreateMaybeMessage< ::AlternateEffectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlternateEffectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::EffectConfig* Arena::CreateMaybeMessage< ::EffectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EffectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::EffectProto* Arena::CreateMaybeMessage< ::EffectProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EffectProto >(arena);
}
template<> PROTOBUF_NOINLINE ::AnimationProto* Arena::CreateMaybeMessage< ::AnimationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AnimationProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
